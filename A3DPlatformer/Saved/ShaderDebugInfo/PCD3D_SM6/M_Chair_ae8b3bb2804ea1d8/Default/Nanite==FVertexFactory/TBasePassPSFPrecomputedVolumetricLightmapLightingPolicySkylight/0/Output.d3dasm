;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; PACKED_VIEW_INDEX        0   x           0     NONE    uint       
; MACRO_TILE_INDEX         0    y          0     NONE    uint       
; SV_IsFrontFace           0     z         0    FFACE    uint       
; SV_Position              0   xyzw        1      POS   float   xy  
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
; SV_Target                1   xyzw        1   TARGET   float   xyzw
; SV_Target                2   xyzw        2   TARGET   float   xyzw
; SV_Target                3   xyzw        3   TARGET   float   xyzw
; SV_Target                5   xyzw        5   TARGET   float   xyzw
;
; shader hash: b169d89c43eb6d26d4e9ae89242d0402
;
; Pipeline Runtime Information: 
;
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; PACKED_VIEW_INDEX        0        nointerpolation       
; MACRO_TILE_INDEX         0        nointerpolation       
; SV_Position              0          noperspective       
; SV_IsFrontFace           0        nointerpolation       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
; SV_Target                1                              
; SV_Target                2                              
; SV_Target                3                              
; SV_Target                5                              
;
; Buffer Definitions:
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:   64
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  128
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  192
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  256
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  320
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  384
;       row_major float4x4 View_ViewToClip;           ; Offset:  448
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  512
;       row_major float4x4 View_ClipToView;           ; Offset:  576
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  640
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  768
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  832
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  896
;       float3 View_ViewTilePosition;                 ; Offset:  960
;       float PrePadding_View_972;                    ; Offset:  972
;       float3 View_MatrixTilePosition;               ; Offset:  976
;       float PrePadding_View_988;                    ; Offset:  988
;       float3 View_ViewForward;                      ; Offset:  992
;       float PrePadding_View_1004;                   ; Offset: 1004
;       float3 View_ViewUp;                           ; Offset: 1008
;       float PrePadding_View_1020;                   ; Offset: 1020
;       float3 View_ViewRight;                        ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_HMDViewNoRollRight;               ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1072
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1088
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1136
;       float PrePadding_View_1148;                   ; Offset: 1148
;       float3 View_RelativePreViewTranslation;       ; Offset: 1152
;       float PrePadding_View_1164;                   ; Offset: 1164
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1168
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1232
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1360
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1424
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1488
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1552
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1616
;       float PrePadding_View_1628;                   ; Offset: 1628
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1632
;       float PrePadding_View_1644;                   ; Offset: 1644
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1648
;       float PrePadding_View_1660;                   ; Offset: 1660
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1664
;       float PrePadding_View_1676;                   ; Offset: 1676
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1680
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1744
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1808
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1872
;       float4 View_TemporalAAJitter;                 ; Offset: 1936
;       float4 View_GlobalClippingPlane;              ; Offset: 1952
;       float2 View_FieldOfViewWideAngles;            ; Offset: 1968
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 1976
;       float4 View_ViewRectMin;                      ; Offset: 1984
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2000
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2016
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2032
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2048
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2064
;       float4 View_ScreenToViewSpace;                ; Offset: 2080
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2096
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2104
;       int View_NumSceneColorMSAASamples;            ; Offset: 2112
;       float View_ProjectionDepthThicknessScale;     ; Offset: 2116
;       float View_PreExposure;                       ; Offset: 2120
;       float View_OneOverPreExposure;                ; Offset: 2124
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2128
;       float4 View_SpecularOverrideParameter;        ; Offset: 2144
;       float4 View_NormalOverrideParameter;          ; Offset: 2160
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2176
;       float View_PrevFrameGameTime;                 ; Offset: 2184
;       float View_PrevFrameRealTime;                 ; Offset: 2188
;       float View_OutOfBoundsMask;                   ; Offset: 2192
;       float PrePadding_View_2196;                   ; Offset: 2196
;       float PrePadding_View_2200;                   ; Offset: 2200
;       float PrePadding_View_2204;                   ; Offset: 2204
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2208
;       float View_CullingSign;                       ; Offset: 2220
;       float View_NearPlane;                         ; Offset: 2224
;       float View_GameTime;                          ; Offset: 2228
;       float View_RealTime;                          ; Offset: 2232
;       float View_DeltaTime;                         ; Offset: 2236
;       float View_MaterialTextureMipBias;            ; Offset: 2240
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2244
;       uint View_Random;                             ; Offset: 2248
;       uint View_FrameNumber;                        ; Offset: 2252
;       uint View_FrameCounter;                       ; Offset: 2256
;       uint View_StateFrameIndexMod8;                ; Offset: 2260
;       uint View_StateFrameIndex;                    ; Offset: 2264
;       uint View_DebugViewModeMask;                  ; Offset: 2268
;       uint View_WorldIsPaused;                      ; Offset: 2272
;       float View_CameraCut;                         ; Offset: 2276
;       float View_UnlitViewmodeMask;                 ; Offset: 2280
;       float PrePadding_View_2284;                   ; Offset: 2284
;       float4 View_DirectionalLightColor;            ; Offset: 2288
;       float3 View_DirectionalLightDirection;        ; Offset: 2304
;       float PrePadding_View_2316;                   ; Offset: 2316
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2320
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2352
;       float4 View_TemporalAAParams;                 ; Offset: 2384
;       float4 View_CircleDOFParams;                  ; Offset: 2400
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2416
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2420
;       float View_DepthOfFieldScale;                 ; Offset: 2424
;       float View_DepthOfFieldFocalLength;           ; Offset: 2428
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2432
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2436
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2440
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2444
;       float View_GeneralPurposeTweak;               ; Offset: 2448
;       float View_GeneralPurposeTweak2;              ; Offset: 2452
;       float View_DemosaicVposOffset;                ; Offset: 2456
;       float View_DecalDepthBias;                    ; Offset: 2460
;       float3 View_IndirectLightingColorScale;       ; Offset: 2464
;       float PrePadding_View_2476;                   ; Offset: 2476
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2480
;       float PrePadding_View_2492;                   ; Offset: 2492
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2496
;       float PrePadding_View_2508;                   ; Offset: 2508
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2512
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2544
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2576
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2608
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2640
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2672
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2688
;       float PrePadding_View_2700;                   ; Offset: 2700
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2704
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2720
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2784
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2800
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2804
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2808
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2812
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2816
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2832
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2836
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2840
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2844
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2848
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2852
;       float PrePadding_View_2856;                   ; Offset: 2856
;       float PrePadding_View_2860;                   ; Offset: 2860
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2864
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2876
;       float View_RealTimeReflectionCapture;         ; Offset: 2880
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2884
;       float PrePadding_View_2888;                   ; Offset: 2888
;       float PrePadding_View_2892;                   ; Offset: 2892
;       float4 View_AmbientCubemapTint;               ; Offset: 2896
;       float View_AmbientCubemapIntensity;           ; Offset: 2912
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2916
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2920
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2924
;       float4 View_SkyLightColor;                    ; Offset: 2928
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 2944
;       float View_MobilePreviewMode;                 ; Offset: 3072
;       float View_HMDEyePaddingOffset;               ; Offset: 3076
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3080
;       float View_ShowDecalsMask;                    ; Offset: 3084
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3088
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3092
;       float PrePadding_View_3096;                   ; Offset: 3096
;       float PrePadding_View_3100;                   ; Offset: 3100
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3104
;       int View_StereoPassIndex;                     ; Offset: 3116
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3120
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3216
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3312
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3408
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3504
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3508
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3512
;       int PrePadding_View_3516;                     ; Offset: 3516
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3520
;       float PrePadding_View_3532;                   ; Offset: 3532
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3536
;       float View_GlobalVolumeDimension;             ; Offset: 3548
;       float View_GlobalVolumeTexelSize;             ; Offset: 3552
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3556
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3560
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3564
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3568
;       float View_NotCoveredMinStepScale;            ; Offset: 3572
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3576
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3580
;       int2 View_CursorPosition;                     ; Offset: 3584
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3592
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3600
;       float PrePadding_View_3612;                   ; Offset: 3612
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3616
;       float PrePadding_View_3628;                   ; Offset: 3628
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3632
;       float2 View_VolumetricFogViewGridUVToPrevViewRectUV;; Offset: 3640
;       float2 View_VolumetricFogPrevViewGridRectUVToResourceUV;; Offset: 3648
;       float2 View_VolumetricFogPrevUVMax;           ; Offset: 3656
;       float2 View_VolumetricFogScreenToResourceUV;  ; Offset: 3664
;       float2 View_VolumetricFogUVMax;               ; Offset: 3672
;       float View_VolumetricFogMaxDistance;          ; Offset: 3680
;       float PrePadding_View_3684;                   ; Offset: 3684
;       float PrePadding_View_3688;                   ; Offset: 3688
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3696
;       float PrePadding_View_3708;                   ; Offset: 3708
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3712
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3728
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3740
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3744
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3756
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3760
;       float PrePadding_View_3764;                   ; Offset: 3764
;       float PrePadding_View_3768;                   ; Offset: 3768
;       float PrePadding_View_3772;                   ; Offset: 3772
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3776
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3808
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3812
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3816
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3820
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3824
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3828
;       uint PrePadding_View_3832;                    ; Offset: 3832
;       uint PrePadding_View_3836;                    ; Offset: 3836
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3840
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3856
;       float PrePadding_View_3864;                   ; Offset: 3864
;       float PrePadding_View_3868;                   ; Offset: 3868
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3872
;       float View_OverrideLandscapeLOD;              ; Offset: 3888
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3892
;       float View_MinRoughness;                      ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_HairRenderInfo;                   ; Offset: 3904
;       uint View_EnableSkyLight;                     ; Offset: 3920
;       uint View_HairRenderInfoBits;                 ; Offset: 3924
;       uint View_HairComponents;                     ; Offset: 3928
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3932
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3936
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3952
;       float4 View_SpecularProfileTextureSizeAndInvSize;; Offset: 3968
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 3984
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 3996
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4000
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4004
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4008
;       int View_PhysicsFieldTargetCount;             ; Offset: 4012
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4016
;       uint View_GPUSceneViewId;                     ; Offset: 4528
;       float View_ViewResolutionFraction;            ; Offset: 4532
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4536
;       float PrePadding_View_4540;                   ; Offset: 4540
;       float4 View_TanAndInvTanHalfFOV;              ; Offset: 4544
;       float4 View_PrevTanAndInvTanHalfFOV;          ; Offset: 4560
;       float4 View_GlintLUTParameters0;              ; Offset: 4576
;       float4 View_GlintLUTParameters1;              ; Offset: 4592
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessSampler_View_GlobalDistanceFieldPageAtlasTextureSampler;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_GlobalDistanceFieldCoverageAtlasTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessSampler_View_GlobalDistanceFieldMipTextureSampler;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5104
;       uint PrePadding_View_5108;                    ; Offset: 5108
;       uint BindlessResource_View_GGXLTCMatTexture;  ; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessSampler_View_GGXLTCMatSampler;   ; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_GGXLTCAmpTexture;  ; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessSampler_View_GGXLTCAmpSampler;   ; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessResource_View_SheenLTCTexture;   ; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessSampler_View_SheenLTCSampler;    ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint View_bShadingEnergyConservation;         ; Offset: 5160
;       uint View_bShadingEnergyPreservation;         ; Offset: 5164
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint BindlessResource_View_GlintTexture;      ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       uint BindlessSampler_View_GlintSampler;       ; Offset: 5216
;       uint PrePadding_View_5220;                    ; Offset: 5220
;       uint BindlessResource_View_SimpleVolumeTexture;; Offset: 5224
;       uint PrePadding_View_5228;                    ; Offset: 5228
;       uint BindlessSampler_View_SimpleVolumeTextureSampler;; Offset: 5232
;       uint PrePadding_View_5236;                    ; Offset: 5236
;       uint BindlessResource_View_SimpleVolumeEnvTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_SimpleVolumeEnvTextureSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5264
;       uint PrePadding_View_5268;                    ; Offset: 5268
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5272
;       uint PrePadding_View_5276;                    ; Offset: 5276
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessResource_View_SpecularProfileTexture;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessSampler_View_SpecularProfileSampler;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_WaterData;         ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5328
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5344
;       float PrePadding_View_5348;                   ; Offset: 5348
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5360
;       uint PrePadding_View_5364;                    ; Offset: 5364
;       uint PrePadding_View_5368;                    ; Offset: 5368
;       uint PrePadding_View_5372;                    ; Offset: 5372
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5376
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5392
;       uint PrePadding_View_5396;                    ; Offset: 5396
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5400
;       uint PrePadding_View_5404;                    ; Offset: 5404
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5408
;       uint PrePadding_View_5412;                    ; Offset: 5412
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5416
;       uint PrePadding_View_5420;                    ; Offset: 5420
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5424
;       uint PrePadding_View_5428;                    ; Offset: 5428
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5432
;       uint PrePadding_View_5436;                    ; Offset: 5436
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5440
;       uint PrePadding_View_5444;                    ; Offset: 5444
;       uint PrePadding_View_5448;                    ; Offset: 5448
;       uint PrePadding_View_5452;                    ; Offset: 5452
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5456
;       float PrePadding_View_5468;                   ; Offset: 5468
;       float3 View_TLASViewTilePosition;             ; Offset: 5472
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5484
;
; }
;
; cbuffer UniformBufferConstants_Scene
; {
;
;   struct UniformBufferConstants_Scene
;   {
;
;       uint BindlessResource_Scene_GPUScene_GPUSceneInstanceSceneData;; Offset:    0
;       uint PrePadding_Scene_GPUScene_4;             ; Offset:    4
;       uint BindlessResource_Scene_GPUScene_GPUSceneInstancePayloadData;; Offset:    8
;       uint PrePadding_Scene_GPUScene_12;            ; Offset:   12
;       uint BindlessResource_Scene_GPUScene_GPUScenePrimitiveSceneData;; Offset:   16
;       uint PrePadding_Scene_GPUScene_20;            ; Offset:   20
;       uint BindlessResource_Scene_GPUScene_GPUSceneLightmapData;; Offset:   24
;       uint PrePadding_Scene_GPUScene_28;            ; Offset:   28
;       uint BindlessResource_Scene_GPUScene_GPUSceneLightData;; Offset:   32
;       uint PrePadding_Scene_GPUScene_36;            ; Offset:   36
;       uint Scene_GPUScene_InstanceDataSOAStride;    ; Offset:   40
;       uint Scene_GPUScene_GPUSceneFrameNumber;      ; Offset:   44
;       int Scene_GPUScene_NumInstances;              ; Offset:   48
;       int Scene_GPUScene_NumScenePrimitives;        ; Offset:   52
;   
;   } UniformBufferConstants_Scene;                   ; Offset:    0 Size:    56
;
; }
;
; cbuffer UniformBufferConstants_OpaqueBasePass
; {
;
;   struct hostlayout.UniformBufferConstants_OpaqueBasePass
;   {
;
;       uint OpaqueBasePass_Shared_Forward_NumLocalLights;; Offset:    0
;       uint OpaqueBasePass_Shared_Forward_NumReflectionCaptures;; Offset:    4
;       uint OpaqueBasePass_Shared_Forward_HasDirectionalLight;; Offset:    8
;       uint OpaqueBasePass_Shared_Forward_NumGridCells;; Offset:   12
;       int3 OpaqueBasePass_Shared_Forward_CulledGridSize;; Offset:   16
;       uint OpaqueBasePass_Shared_Forward_MaxCulledLightsPerCell;; Offset:   28
;       uint OpaqueBasePass_Shared_Forward_LightGridPixelSizeShift;; Offset:   32
;       uint PrePadding_OpaqueBasePass_Shared_Forward_36;; Offset:   36
;       uint PrePadding_OpaqueBasePass_Shared_Forward_40;; Offset:   40
;       uint PrePadding_OpaqueBasePass_Shared_Forward_44;; Offset:   44
;       float3 OpaqueBasePass_Shared_Forward_LightGridZParams;; Offset:   48
;       float PrePadding_OpaqueBasePass_Shared_Forward_60;; Offset:   60
;       float3 OpaqueBasePass_Shared_Forward_DirectionalLightDirection;; Offset:   64
;       float OpaqueBasePass_Shared_Forward_DirectionalLightSourceRadius;; Offset:   76
;       float3 OpaqueBasePass_Shared_Forward_DirectionalLightColor;; Offset:   80
;       float OpaqueBasePass_Shared_Forward_DirectionalLightVolumetricScatteringIntensity;; Offset:   92
;       uint OpaqueBasePass_Shared_Forward_DirectionalLightShadowMapChannelMask;; Offset:   96
;       uint PrePadding_OpaqueBasePass_Shared_Forward_100;; Offset:  100
;       float2 OpaqueBasePass_Shared_Forward_DirectionalLightDistanceFadeMAD;; Offset:  104
;       uint OpaqueBasePass_Shared_Forward_NumDirectionalLightCascades;; Offset:  112
;       int OpaqueBasePass_Shared_Forward_DirectionalLightVSM;; Offset:  116
;       int PrePadding_OpaqueBasePass_Shared_Forward_120;; Offset:  120
;       int PrePadding_OpaqueBasePass_Shared_Forward_124;; Offset:  124
;       float4 OpaqueBasePass_Shared_Forward_CascadeEndDepths;; Offset:  128
;       row_major float4x4 OpaqueBasePass_Shared_Forward_DirectionalLightTranslatedWorldToShadowMatrix[4];; Offset:  144
;       float4 OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapMinMax[4];; Offset:  400
;       float4 OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapAtlasBufferSize;; Offset:  464
;       float OpaqueBasePass_Shared_Forward_DirectionalLightDepthBias;; Offset:  480
;       uint OpaqueBasePass_Shared_Forward_DirectionalLightUseStaticShadowing;; Offset:  484
;       uint OpaqueBasePass_Shared_Forward_SimpleLightsEndIndex;; Offset:  488
;       uint OpaqueBasePass_Shared_Forward_ClusteredDeferredSupportedEndIndex;; Offset:  492
;       uint OpaqueBasePass_Shared_Forward_LumenSupportedStartIndex;; Offset:  496
;       uint PrePadding_OpaqueBasePass_Shared_Forward_500;; Offset:  500
;       uint PrePadding_OpaqueBasePass_Shared_Forward_504;; Offset:  504
;       uint PrePadding_OpaqueBasePass_Shared_Forward_508;; Offset:  508
;       float4 OpaqueBasePass_Shared_Forward_DirectionalLightStaticShadowBufferSize;; Offset:  512
;       row_major float4x4 OpaqueBasePass_Shared_Forward_DirectionalLightTranslatedWorldToStaticShadow;; Offset:  528
;       uint OpaqueBasePass_Shared_Forward_DirectLightingShowFlag;; Offset:  592
;       float PrePadding_OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_596;; Offset:  596
;       float PrePadding_OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_600;; Offset:  600
;       float PrePadding_OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_604;; Offset:  604
;       float OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_ScreenRayLength;; Offset:  608
;       int OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTRayCount;; Offset:  612
;       int OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTSamplesPerRay;; Offset:  616
;       float OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTRayLengthScale;; Offset:  620
;       float OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;; Offset:  624
;       float OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTTexelDitherScale;; Offset:  628
;       float OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;; Offset:  632
;       float OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;; Offset:  636
;       uint OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;; Offset:  640
;       uint PrePadding_OpaqueBasePass_Shared_Forward_644;; Offset:  644
;       uint PrePadding_OpaqueBasePass_Shared_Forward_648;; Offset:  648
;       uint PrePadding_OpaqueBasePass_Shared_Forward_652;; Offset:  652
;       uint BindlessResource_OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapAtlas;; Offset:  656
;       uint PrePadding_OpaqueBasePass_Shared_Forward_660;; Offset:  660
;       uint BindlessSampler_OpaqueBasePass_Shared_Forward_ShadowmapSampler;; Offset:  664
;       uint PrePadding_OpaqueBasePass_Shared_Forward_668;; Offset:  668
;       uint BindlessResource_OpaqueBasePass_Shared_Forward_DirectionalLightStaticShadowmap;; Offset:  672
;       uint PrePadding_OpaqueBasePass_Shared_Forward_676;; Offset:  676
;       uint BindlessSampler_OpaqueBasePass_Shared_Forward_StaticShadowmapSampler;; Offset:  680
;       uint PrePadding_OpaqueBasePass_Shared_Forward_684;; Offset:  684
;       uint BindlessResource_OpaqueBasePass_Shared_Forward_ForwardLocalLightBuffer;; Offset:  688
;       uint PrePadding_OpaqueBasePass_Shared_Forward_692;; Offset:  692
;       uint BindlessResource_OpaqueBasePass_Shared_Forward_NumCulledLightsGrid;; Offset:  696
;       uint PrePadding_OpaqueBasePass_Shared_Forward_700;; Offset:  700
;       uint BindlessResource_OpaqueBasePass_Shared_Forward_CulledLightDataGrid32Bit;; Offset:  704
;       uint PrePadding_OpaqueBasePass_Shared_Forward_708;; Offset:  708
;       uint BindlessResource_OpaqueBasePass_Shared_Forward_CulledLightDataGrid16Bit;; Offset:  712
;       float PrePadding_OpaqueBasePass_Shared_ForwardISR_716;; Offset:  716
;       uint OpaqueBasePass_Shared_ForwardISR_NumLocalLights;; Offset:  720
;       uint OpaqueBasePass_Shared_ForwardISR_NumReflectionCaptures;; Offset:  724
;       uint OpaqueBasePass_Shared_ForwardISR_HasDirectionalLight;; Offset:  728
;       uint OpaqueBasePass_Shared_ForwardISR_NumGridCells;; Offset:  732
;       int3 OpaqueBasePass_Shared_ForwardISR_CulledGridSize;; Offset:  736
;       uint OpaqueBasePass_Shared_ForwardISR_MaxCulledLightsPerCell;; Offset:  748
;       uint OpaqueBasePass_Shared_ForwardISR_LightGridPixelSizeShift;; Offset:  752
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_756;; Offset:  756
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_760;; Offset:  760
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_764;; Offset:  764
;       float3 OpaqueBasePass_Shared_ForwardISR_LightGridZParams;; Offset:  768
;       float PrePadding_OpaqueBasePass_Shared_ForwardISR_780;; Offset:  780
;       float3 OpaqueBasePass_Shared_ForwardISR_DirectionalLightDirection;; Offset:  784
;       float OpaqueBasePass_Shared_ForwardISR_DirectionalLightSourceRadius;; Offset:  796
;       float3 OpaqueBasePass_Shared_ForwardISR_DirectionalLightColor;; Offset:  800
;       float OpaqueBasePass_Shared_ForwardISR_DirectionalLightVolumetricScatteringIntensity;; Offset:  812
;       uint OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowMapChannelMask;; Offset:  816
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_820;; Offset:  820
;       float2 OpaqueBasePass_Shared_ForwardISR_DirectionalLightDistanceFadeMAD;; Offset:  824
;       uint OpaqueBasePass_Shared_ForwardISR_NumDirectionalLightCascades;; Offset:  832
;       int OpaqueBasePass_Shared_ForwardISR_DirectionalLightVSM;; Offset:  836
;       int PrePadding_OpaqueBasePass_Shared_ForwardISR_840;; Offset:  840
;       int PrePadding_OpaqueBasePass_Shared_ForwardISR_844;; Offset:  844
;       float4 OpaqueBasePass_Shared_ForwardISR_CascadeEndDepths;; Offset:  848
;       row_major float4x4 OpaqueBasePass_Shared_ForwardISR_DirectionalLightTranslatedWorldToShadowMatrix[4];; Offset:  864
;       float4 OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowmapMinMax[4];; Offset: 1120
;       float4 OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlasBufferSize;; Offset: 1184
;       float OpaqueBasePass_Shared_ForwardISR_DirectionalLightDepthBias;; Offset: 1200
;       uint OpaqueBasePass_Shared_ForwardISR_DirectionalLightUseStaticShadowing;; Offset: 1204
;       uint OpaqueBasePass_Shared_ForwardISR_SimpleLightsEndIndex;; Offset: 1208
;       uint OpaqueBasePass_Shared_ForwardISR_ClusteredDeferredSupportedEndIndex;; Offset: 1212
;       uint OpaqueBasePass_Shared_ForwardISR_LumenSupportedStartIndex;; Offset: 1216
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_1220;; Offset: 1220
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_1224;; Offset: 1224
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_1228;; Offset: 1228
;       float4 OpaqueBasePass_Shared_ForwardISR_DirectionalLightStaticShadowBufferSize;; Offset: 1232
;       row_major float4x4 OpaqueBasePass_Shared_ForwardISR_DirectionalLightTranslatedWorldToStaticShadow;; Offset: 1248
;       uint OpaqueBasePass_Shared_ForwardISR_DirectLightingShowFlag;; Offset: 1312
;       float PrePadding_OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_1316;; Offset: 1316
;       float PrePadding_OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_1320;; Offset: 1320
;       float PrePadding_OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_1324;; Offset: 1324
;       float OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_ScreenRayLength;; Offset: 1328
;       int OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTRayCount;; Offset: 1332
;       int OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTSamplesPerRay;; Offset: 1336
;       float OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTRayLengthScale;; Offset: 1340
;       float OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;; Offset: 1344
;       float OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTTexelDitherScale;; Offset: 1348
;       float OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;; Offset: 1352
;       float OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;; Offset: 1356
;       uint OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;; Offset: 1360
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_1364;; Offset: 1364
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_1368;; Offset: 1368
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_1372;; Offset: 1372
;       uint BindlessResource_OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlas;; Offset: 1376
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_1380;; Offset: 1380
;       uint BindlessSampler_OpaqueBasePass_Shared_ForwardISR_ShadowmapSampler;; Offset: 1384
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_1388;; Offset: 1388
;       uint BindlessResource_OpaqueBasePass_Shared_ForwardISR_DirectionalLightStaticShadowmap;; Offset: 1392
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_1396;; Offset: 1396
;       uint BindlessSampler_OpaqueBasePass_Shared_ForwardISR_StaticShadowmapSampler;; Offset: 1400
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_1404;; Offset: 1404
;       uint BindlessResource_OpaqueBasePass_Shared_ForwardISR_ForwardLocalLightBuffer;; Offset: 1408
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_1412;; Offset: 1412
;       uint BindlessResource_OpaqueBasePass_Shared_ForwardISR_NumCulledLightsGrid;; Offset: 1416
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_1420;; Offset: 1420
;       uint BindlessResource_OpaqueBasePass_Shared_ForwardISR_CulledLightDataGrid32Bit;; Offset: 1424
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_1428;; Offset: 1428
;       uint BindlessResource_OpaqueBasePass_Shared_ForwardISR_CulledLightDataGrid16Bit;; Offset: 1432
;       float PrePadding_OpaqueBasePass_Shared_Reflection_1436;; Offset: 1436
;       float4 OpaqueBasePass_Shared_Reflection_SkyLightParameters;; Offset: 1440
;       uint BindlessResource_OpaqueBasePass_Shared_Reflection_SkyLightCubemap;; Offset: 1456
;       uint PrePadding_OpaqueBasePass_Shared_Reflection_1460;; Offset: 1460
;       uint BindlessSampler_OpaqueBasePass_Shared_Reflection_SkyLightCubemapSampler;; Offset: 1464
;       uint PrePadding_OpaqueBasePass_Shared_Reflection_1468;; Offset: 1468
;       uint BindlessResource_OpaqueBasePass_Shared_Reflection_SkyLightBlendDestinationCubemap;; Offset: 1472
;       uint PrePadding_OpaqueBasePass_Shared_Reflection_1476;; Offset: 1476
;       uint BindlessSampler_OpaqueBasePass_Shared_Reflection_SkyLightBlendDestinationCubemapSampler;; Offset: 1480
;       uint PrePadding_OpaqueBasePass_Shared_Reflection_1484;; Offset: 1484
;       uint BindlessResource_OpaqueBasePass_Shared_Reflection_ReflectionCubemap;; Offset: 1488
;       uint PrePadding_OpaqueBasePass_Shared_Reflection_1492;; Offset: 1492
;       uint BindlessSampler_OpaqueBasePass_Shared_Reflection_ReflectionCubemapSampler;; Offset: 1496
;       uint PrePadding_OpaqueBasePass_Shared_Reflection_1500;; Offset: 1500
;       uint BindlessResource_OpaqueBasePass_Shared_Reflection_PreIntegratedGF;; Offset: 1504
;       uint PrePadding_OpaqueBasePass_Shared_Reflection_1508;; Offset: 1508
;       uint BindlessSampler_OpaqueBasePass_Shared_Reflection_PreIntegratedGFSampler;; Offset: 1512
;       float PrePadding_OpaqueBasePass_Shared_PlanarReflection_1516;; Offset: 1516
;       float4 OpaqueBasePass_Shared_PlanarReflection_ReflectionPlane;; Offset: 1520
;       float4 OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionOrigin;; Offset: 1536
;       float4 OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionXAxis;; Offset: 1552
;       float4 OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionYAxis;; Offset: 1568
;       row_major float3x4 OpaqueBasePass_Shared_PlanarReflection_InverseTransposeMirrorMatrix;; Offset: 1584
;       float3 OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionParameters;; Offset: 1632
;       float PrePadding_OpaqueBasePass_Shared_PlanarReflection_1644;; Offset: 1644
;       float2 OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionParameters2;; Offset: 1648
;       float PrePadding_OpaqueBasePass_Shared_PlanarReflection_1656;; Offset: 1656
;       float PrePadding_OpaqueBasePass_Shared_PlanarReflection_1660;; Offset: 1660
;       row_major float4x4 OpaqueBasePass_Shared_PlanarReflection_ProjectionWithExtraFOV[2];; Offset: 1664
;       float4 OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionScreenScaleBias[2];; Offset: 1792
;       float2 OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionScreenBound;; Offset: 1824
;       uint OpaqueBasePass_Shared_PlanarReflection_bIsStereo;; Offset: 1832
;       uint PrePadding_OpaqueBasePass_Shared_PlanarReflection_1836;; Offset: 1836
;       uint BindlessResource_OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionTexture;; Offset: 1840
;       uint PrePadding_OpaqueBasePass_Shared_PlanarReflection_1844;; Offset: 1844
;       uint BindlessSampler_OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionSampler;; Offset: 1848
;       float PrePadding_OpaqueBasePass_Shared_Fog_1852;; Offset: 1852
;       float4 OpaqueBasePass_Shared_Fog_ExponentialFogParameters;; Offset: 1856
;       float4 OpaqueBasePass_Shared_Fog_ExponentialFogParameters2;; Offset: 1872
;       float4 OpaqueBasePass_Shared_Fog_ExponentialFogColorParameter;; Offset: 1888
;       float4 OpaqueBasePass_Shared_Fog_ExponentialFogParameters3;; Offset: 1904
;       float4 OpaqueBasePass_Shared_Fog_SkyAtmosphereAmbientContributionColorScale;; Offset: 1920
;       float4 OpaqueBasePass_Shared_Fog_InscatteringLightDirection;; Offset: 1936
;       float4 OpaqueBasePass_Shared_Fog_DirectionalInscatteringColor;; Offset: 1952
;       float2 OpaqueBasePass_Shared_Fog_SinCosInscatteringColorCubemapRotation;; Offset: 1968
;       float PrePadding_OpaqueBasePass_Shared_Fog_1976;; Offset: 1976
;       float PrePadding_OpaqueBasePass_Shared_Fog_1980;; Offset: 1980
;       float3 OpaqueBasePass_Shared_Fog_FogInscatteringTextureParameters;; Offset: 1984
;       float OpaqueBasePass_Shared_Fog_ApplyVolumetricFog;; Offset: 1996
;       float OpaqueBasePass_Shared_Fog_VolumetricFogStartDistance;; Offset: 2000
;       float OpaqueBasePass_Shared_Fog_VolumetricFogNearFadeInDistanceInv;; Offset: 2004
;       uint BindlessResource_OpaqueBasePass_Shared_Fog_FogInscatteringColorCubemap;; Offset: 2008
;       uint PrePadding_OpaqueBasePass_Shared_Fog_2012;; Offset: 2012
;       uint BindlessSampler_OpaqueBasePass_Shared_Fog_FogInscatteringColorSampler;; Offset: 2016
;       uint PrePadding_OpaqueBasePass_Shared_Fog_2020;; Offset: 2020
;       uint BindlessResource_OpaqueBasePass_Shared_Fog_IntegratedLightScattering;; Offset: 2024
;       uint PrePadding_OpaqueBasePass_Shared_Fog_2028;; Offset: 2028
;       uint BindlessSampler_OpaqueBasePass_Shared_Fog_IntegratedLightScatteringSampler;; Offset: 2032
;       float PrePadding_OpaqueBasePass_Shared_FogISR_2036;; Offset: 2036
;       float PrePadding_OpaqueBasePass_Shared_FogISR_2040;; Offset: 2040
;       float PrePadding_OpaqueBasePass_Shared_FogISR_2044;; Offset: 2044
;       float4 OpaqueBasePass_Shared_FogISR_ExponentialFogParameters;; Offset: 2048
;       float4 OpaqueBasePass_Shared_FogISR_ExponentialFogParameters2;; Offset: 2064
;       float4 OpaqueBasePass_Shared_FogISR_ExponentialFogColorParameter;; Offset: 2080
;       float4 OpaqueBasePass_Shared_FogISR_ExponentialFogParameters3;; Offset: 2096
;       float4 OpaqueBasePass_Shared_FogISR_SkyAtmosphereAmbientContributionColorScale;; Offset: 2112
;       float4 OpaqueBasePass_Shared_FogISR_InscatteringLightDirection;; Offset: 2128
;       float4 OpaqueBasePass_Shared_FogISR_DirectionalInscatteringColor;; Offset: 2144
;       float2 OpaqueBasePass_Shared_FogISR_SinCosInscatteringColorCubemapRotation;; Offset: 2160
;       float PrePadding_OpaqueBasePass_Shared_FogISR_2168;; Offset: 2168
;       float PrePadding_OpaqueBasePass_Shared_FogISR_2172;; Offset: 2172
;       float3 OpaqueBasePass_Shared_FogISR_FogInscatteringTextureParameters;; Offset: 2176
;       float OpaqueBasePass_Shared_FogISR_ApplyVolumetricFog;; Offset: 2188
;       float OpaqueBasePass_Shared_FogISR_VolumetricFogStartDistance;; Offset: 2192
;       float OpaqueBasePass_Shared_FogISR_VolumetricFogNearFadeInDistanceInv;; Offset: 2196
;       uint BindlessResource_OpaqueBasePass_Shared_FogISR_FogInscatteringColorCubemap;; Offset: 2200
;       uint PrePadding_OpaqueBasePass_Shared_FogISR_2204;; Offset: 2204
;       uint BindlessSampler_OpaqueBasePass_Shared_FogISR_FogInscatteringColorSampler;; Offset: 2208
;       uint PrePadding_OpaqueBasePass_Shared_FogISR_2212;; Offset: 2212
;       uint BindlessResource_OpaqueBasePass_Shared_FogISR_IntegratedLightScattering;; Offset: 2216
;       uint PrePadding_OpaqueBasePass_Shared_FogISR_2220;; Offset: 2220
;       uint BindlessSampler_OpaqueBasePass_Shared_FogISR_IntegratedLightScatteringSampler;; Offset: 2224
;       float PrePadding_OpaqueBasePass_Shared_2228;  ; Offset: 2228
;       float PrePadding_OpaqueBasePass_Shared_2232;  ; Offset: 2232
;       float PrePadding_OpaqueBasePass_Shared_2236;  ; Offset: 2236
;       uint OpaqueBasePass_Shared_UseBasePassSkylight;; Offset: 2240
;       float PrePadding_OpaqueBasePass_Strata_2244;  ; Offset: 2244
;       float PrePadding_OpaqueBasePass_Strata_2248;  ; Offset: 2248
;       float PrePadding_OpaqueBasePass_Strata_2252;  ; Offset: 2252
;       uint OpaqueBasePass_Strata_MaxBytesPerPixel;  ; Offset: 2256
;       uint OpaqueBasePass_Strata_bRoughDiffuse;     ; Offset: 2260
;       uint OpaqueBasePass_Strata_PeelLayersAboveDepth;; Offset: 2264
;       uint OpaqueBasePass_Strata_bRoughnessTracking;; Offset: 2268
;       int OpaqueBasePass_Strata_SliceStoringDebugStrataTreeDataWithoutMRT;; Offset: 2272
;       int OpaqueBasePass_Strata_FirstSliceStoringStrataSSSDataWithoutMRT;; Offset: 2276
;       uint BindlessResource_OpaqueBasePass_Strata_MaterialTextureArrayUAVWithoutRTs;; Offset: 2280
;       uint PrePadding_OpaqueBasePass_Strata_2284;   ; Offset: 2284
;       uint BindlessResource_OpaqueBasePass_Strata_OpaqueRoughRefractionTextureUAV;; Offset: 2288
;       float PrePadding_OpaqueBasePass_2292;         ; Offset: 2292
;       float PrePadding_OpaqueBasePass_2296;         ; Offset: 2296
;       float PrePadding_OpaqueBasePass_2300;         ; Offset: 2300
;       int OpaqueBasePass_UseForwardScreenSpaceShadowMask;; Offset: 2304
;       int PrePadding_OpaqueBasePass_2308;           ; Offset: 2308
;       uint BindlessResource_OpaqueBasePass_ForwardScreenSpaceShadowMaskTexture;; Offset: 2312
;       uint PrePadding_OpaqueBasePass_2316;          ; Offset: 2316
;       uint BindlessResource_OpaqueBasePass_IndirectOcclusionTexture;; Offset: 2320
;       uint PrePadding_OpaqueBasePass_2324;          ; Offset: 2324
;       uint BindlessResource_OpaqueBasePass_ResolvedSceneDepthTexture;; Offset: 2328
;       float PrePadding_OpaqueBasePass_2332;         ; Offset: 2332
;       uint BindlessResource_OpaqueBasePass_DBufferATexture;; Offset: 2336
;       uint PrePadding_OpaqueBasePass_2340;          ; Offset: 2340
;       uint BindlessResource_OpaqueBasePass_DBufferBTexture;; Offset: 2344
;       uint PrePadding_OpaqueBasePass_2348;          ; Offset: 2348
;       uint BindlessResource_OpaqueBasePass_DBufferCTexture;; Offset: 2352
;       uint PrePadding_OpaqueBasePass_2356;          ; Offset: 2356
;       uint BindlessResource_OpaqueBasePass_DBufferRenderMask;; Offset: 2360
;       uint PrePadding_OpaqueBasePass_2364;          ; Offset: 2364
;       uint BindlessSampler_OpaqueBasePass_DBufferATextureSampler;; Offset: 2368
;       uint PrePadding_OpaqueBasePass_2372;          ; Offset: 2372
;       uint BindlessSampler_OpaqueBasePass_DBufferBTextureSampler;; Offset: 2376
;       uint PrePadding_OpaqueBasePass_2380;          ; Offset: 2380
;       uint BindlessSampler_OpaqueBasePass_DBufferCTextureSampler;; Offset: 2384
;       uint PrePadding_OpaqueBasePass_2388;          ; Offset: 2388
;       uint PrePadding_OpaqueBasePass_2392;          ; Offset: 2392
;       uint PrePadding_OpaqueBasePass_2396;          ; Offset: 2396
;       uint BindlessResource_OpaqueBasePass_PreIntegratedGFTexture;; Offset: 2400
;       uint PrePadding_OpaqueBasePass_2404;          ; Offset: 2404
;       uint BindlessSampler_OpaqueBasePass_PreIntegratedGFSampler;; Offset: 2408
;       uint PrePadding_OpaqueBasePass_2412;          ; Offset: 2412
;       int OpaqueBasePass_Is24BitUnormDepthStencil;  ; Offset: 2416
;       int PrePadding_OpaqueBasePass_2420;           ; Offset: 2420
;       uint BindlessResource_OpaqueBasePass_EyeAdaptationBuffer;; Offset: 2424
;   
;   } UniformBufferConstants_OpaqueBasePass;          ; Offset:    0 Size:  2428
;
; }
;
; cbuffer UniformBufferConstants_Nanite
; {
;
;   struct UniformBufferConstants_Nanite
;   {
;
;       int4 Nanite_PageConstants;                    ; Offset:    0
;       int4 Nanite_MaterialConfig;                   ; Offset:   16
;       uint Nanite_MaxNodes;                         ; Offset:   32
;       uint Nanite_MaxVisibleClusters;               ; Offset:   36
;       uint Nanite_RenderFlags;                      ; Offset:   40
;       float Nanite_RayTracingCutError;              ; Offset:   44
;       float4 Nanite_RectScaleOffset;                ; Offset:   48
;       uint BindlessResource_Nanite_ClusterPageData; ; Offset:   64
;       uint PrePadding_Nanite_68;                    ; Offset:   68
;       uint BindlessResource_Nanite_VisibleClustersSWHW;; Offset:   72
;       uint PrePadding_Nanite_76;                    ; Offset:   76
;       uint BindlessResource_Nanite_HierarchyBuffer; ; Offset:   80
;       uint PrePadding_Nanite_84;                    ; Offset:   84
;       uint BindlessResource_Nanite_MaterialTileRemap;; Offset:   88
;       uint PrePadding_Nanite_92;                    ; Offset:   92
;       uint BindlessResource_Nanite_MaterialDepthTable;; Offset:   96
;       uint PrePadding_Nanite_100;                   ; Offset:  100
;       uint BindlessResource_Nanite_ShadingMask;     ; Offset:  104
;       uint PrePadding_Nanite_108;                   ; Offset:  108
;       uint BindlessResource_Nanite_VisBuffer64;     ; Offset:  112
;       uint PrePadding_Nanite_116;                   ; Offset:  116
;       uint BindlessResource_Nanite_DbgBuffer64;     ; Offset:  120
;       uint PrePadding_Nanite_124;                   ; Offset:  124
;       uint BindlessResource_Nanite_DbgBuffer32;     ; Offset:  128
;       uint PrePadding_Nanite_132;                   ; Offset:  132
;       uint BindlessResource_Nanite_RayTracingDataBuffer;; Offset:  136
;       uint PrePadding_Nanite_140;                   ; Offset:  140
;       uint BindlessResource_Nanite_ShadingBinMeta;  ; Offset:  144
;       uint PrePadding_Nanite_148;                   ; Offset:  148
;       uint BindlessResource_Nanite_ShadingBinData;  ; Offset:  152
;       uint PrePadding_Nanite_156;                   ; Offset:  156
;       uint Nanite_MultiViewEnabled;                 ; Offset:  160
;       uint PrePadding_Nanite_164;                   ; Offset:  164
;       uint BindlessResource_Nanite_MultiViewIndices;; Offset:  168
;       uint PrePadding_Nanite_172;                   ; Offset:  172
;       uint BindlessResource_Nanite_MultiViewRectScaleOffsets;; Offset:  176
;       uint PrePadding_Nanite_180;                   ; Offset:  180
;       uint BindlessResource_Nanite_InViews;         ; Offset:  184
;   
;   } UniformBufferConstants_Nanite;                  ; Offset:    0 Size:   188
;
; }
;
; cbuffer UniformBufferConstants_Material
; {
;
;   struct UniformBufferConstants_Material
;   {
;
;       float4 Material_PreshaderBuffer[9];           ; Offset:    0
;       uint BindlessResource_Material_Texture2D_0;   ; Offset:  144
;       uint PrePadding_Material_148;                 ; Offset:  148
;       uint BindlessSampler_Material_Texture2D_0Sampler;; Offset:  152
;       uint PrePadding_Material_156;                 ; Offset:  156
;       uint BindlessResource_Material_Texture2D_1;   ; Offset:  160
;       uint PrePadding_Material_164;                 ; Offset:  164
;       uint BindlessSampler_Material_Texture2D_1Sampler;; Offset:  168
;       uint PrePadding_Material_172;                 ; Offset:  172
;       uint BindlessSampler_Material_Wrap_WorldGroupSettings;; Offset:  176
;       uint PrePadding_Material_180;                 ; Offset:  180
;       uint BindlessSampler_Material_Clamp_WorldGroupSettings;; Offset:  184
;   
;   } UniformBufferConstants_Material;                ; Offset:    0 Size:   188
;
; }
;
; Resource bind info for View_SkyIrradianceEnvironmentMap
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for Scene_GPUScene_GPUSceneInstanceSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for Scene_GPUScene_GPUScenePrimitiveSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; UniformBufferConstants_View       cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_Scene      cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_OpaqueBasePass   cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_Nanite     cbuffer      NA          NA     CB3            cb3     1
; UniformBufferConstants_Material   cbuffer      NA          NA     CB4            cb4     1
; View_SharedBilinearClampedSampler   sampler      NA          NA      S0             s0     1
; OpaqueBasePass_DBufferATextureSampler   sampler      NA          NA      S1             s1     1
; Material_Texture2D_0Sampler       sampler      NA          NA      S2             s2     1
; Material_Texture2D_1Sampler       sampler      NA          NA      S3             s3     1
; View_VolumetricLightmapIndirectionTexture   texture     u32          3d      T0             t0     1
; View_VolumetricLightmapBrickAmbientVector   texture     f32          3d      T1             t1     1
; View_VolumetricLightmapBrickSHCoefficients0   texture     f32          3d      T2             t2     1
; View_VolumetricLightmapBrickSHCoefficients1   texture     f32          3d      T3             t3     1
; View_VolumetricLightmapBrickSHCoefficients2   texture     f32          3d      T4             t4     1
; View_VolumetricLightmapBrickSHCoefficients3   texture     f32          3d      T5             t5     1
; View_VolumetricLightmapBrickSHCoefficients4   texture     f32          3d      T6             t6     1
; View_VolumetricLightmapBrickSHCoefficients5   texture     f32          3d      T7             t7     1
; View_SkyBentNormalBrickTexture    texture     f32          3d      T8             t8     1
; View_DirectionalLightShadowingBrickTexture   texture     f32          3d      T9             t9     1
; View_SkyIrradianceEnvironmentMap   texture  struct         r/o     T10            t10     1
; Scene_GPUScene_GPUSceneInstanceSceneData   texture  struct         r/o     T11            t11     1
; Scene_GPUScene_GPUScenePrimitiveSceneData   texture  struct         r/o     T12            t12     1
; OpaqueBasePass_DBufferATexture    texture     f32          2d     T13            t13     1
; OpaqueBasePass_DBufferBTexture    texture     f32          2d     T14            t14     1
; OpaqueBasePass_DBufferCTexture    texture     f32          2d     T15            t15     1
; Nanite_ClusterPageData            texture    byte         r/o     T16            t16     1
; Nanite_VisibleClustersSWHW        texture    byte         r/o     T17            t17     1
; Nanite_VisBuffer64                texture     u32          2d     T18            t18     1
; Material_Texture2D_0              texture     f32          2d     T19            t19     1
; Material_Texture2D_1              texture     f32          2d     T20            t20     1
;
;
; ViewId state:
;
; Number of inputs: 8, outputs: 24
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 4, 5 }
;   output 1 depends on inputs: { 4, 5 }
;   output 2 depends on inputs: { 4, 5 }
;   output 4 depends on inputs: { 4, 5 }
;   output 5 depends on inputs: { 4, 5 }
;   output 6 depends on inputs: { 4, 5 }
;   output 7 depends on inputs: { 4, 5 }
;   output 8 depends on inputs: { 4, 5 }
;   output 9 depends on inputs: { 4, 5 }
;   output 10 depends on inputs: { 4, 5 }
;   output 12 depends on inputs: { 4, 5 }
;   output 13 depends on inputs: { 4, 5 }
;   output 14 depends on inputs: { 4, 5 }
;   output 15 depends on inputs: { 4, 5 }
;   output 20 depends on inputs: { 4, 5 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%"class.Texture3D<vector<unsigned int, 4> >" = type { <4 x i32>, %"class.Texture3D<vector<unsigned int, 4> >::mips_type" }
%"class.Texture3D<vector<unsigned int, 4> >::mips_type" = type { i32 }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%"class.StructuredBuffer<vector<float, 4> >" = type { <4 x float> }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%struct.ByteAddressBuffer = type { i32 }
%"class.Texture2D<unsigned long long>" = type { i64, %"class.Texture2D<unsigned long long>::mips_type" }
%"class.Texture2D<unsigned long long>::mips_type" = type { i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%UniformBufferConstants_Scene = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%hostlayout.UniformBufferConstants_OpaqueBasePass = type { i32, i32, i32, i32, <3 x i32>, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, i32, i32, <2 x float>, i32, i32, i32, i32, <4 x float>, [4 x [4 x <4 x float>]], [4 x <4 x float>], <4 x float>, float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, [4 x <4 x float>], i32, float, float, float, float, i32, i32, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, <3 x i32>, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, i32, i32, <2 x float>, i32, i32, i32, i32, <4 x float>, [4 x [4 x <4 x float>]], [4 x <4 x float>], <4 x float>, float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, [4 x <4 x float>], i32, float, float, float, float, i32, i32, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, <4 x float>, <4 x float>, <4 x float>, <4 x float>, [3 x <4 x float>], <3 x float>, float, <2 x float>, float, float, [2 x [4 x <4 x float>]], [2 x <4 x float>], <2 x float>, i32, i32, i32, i32, i32, float, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, <3 x float>, float, float, float, i32, i32, i32, i32, i32, i32, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, <3 x float>, float, float, float, i32, i32, i32, i32, i32, i32, i32, float, float, float, i32, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, float, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_Nanite = type { <4 x i32>, <4 x i32>, i32, i32, i32, float, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_Material = type { [9 x <4 x float>], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.SamplerState = type { i32 }

define void @MainPS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 20, i32 20, i32 0, i8 0 }, i32 20, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 19, i32 19, i32 0, i8 0 }, i32 19, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 18, i32 18, i32 0, i8 0 }, i32 18, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 17, i32 17, i32 0, i8 0 }, i32 17, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 16, i32 16, i32 0, i8 0 }, i32 16, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 0 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 0 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %26 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 2 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %27 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %28 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %29 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %30 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %31 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 13, i32 188 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %32 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 13, i32 2428 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %33 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 13, i32 56 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %34 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 13, i32 5484 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %35 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %36 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %37 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %33, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %38 = extractvalue %dx.types.CBufRet.i32 %37, 2
  %39 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %32, i32 140)  ; CBufferLoadLegacy(handle,regIndex)
  %40 = extractvalue %dx.types.CBufRet.i32 %39, 0
  %41 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 60)  ; CBufferLoadLegacy(handle,regIndex)
  %42 = extractvalue %dx.types.CBufRet.f32 %41, 0
  %43 = extractvalue %dx.types.CBufRet.f32 %41, 1
  %44 = extractvalue %dx.types.CBufRet.f32 %41, 2
  %45 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %46 = extractvalue %dx.types.CBufRet.f32 %45, 0
  %47 = extractvalue %dx.types.CBufRet.f32 %45, 1
  %48 = extractvalue %dx.types.CBufRet.f32 %45, 2
  %49 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 135)  ; CBufferLoadLegacy(handle,regIndex)
  %50 = extractvalue %dx.types.CBufRet.f32 %49, 0
  %51 = extractvalue %dx.types.CBufRet.f32 %49, 1
  %52 = extractvalue %dx.types.CBufRet.f32 %49, 2
  %53 = extractvalue %dx.types.CBufRet.f32 %49, 3
  %54 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %55 = extractvalue %dx.types.CBufRet.f32 %54, 0
  %56 = extractvalue %dx.types.CBufRet.f32 %54, 1
  %57 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 183)  ; CBufferLoadLegacy(handle,regIndex)
  %58 = extractvalue %dx.types.CBufRet.f32 %57, 0
  %59 = extractvalue %dx.types.CBufRet.f32 %57, 1
  %60 = extractvalue %dx.types.CBufRet.f32 %57, 2
  %61 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %62 = extractvalue %dx.types.CBufRet.f32 %61, 0
  %63 = extractvalue %dx.types.CBufRet.f32 %61, 1
  %64 = extractvalue %dx.types.CBufRet.f32 %61, 3
  %65 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %66 = extractvalue %dx.types.CBufRet.f32 %65, 0
  %67 = extractvalue %dx.types.CBufRet.f32 %65, 1
  %68 = extractvalue %dx.types.CBufRet.f32 %65, 3
  %69 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %70 = extractvalue %dx.types.CBufRet.f32 %69, 0
  %71 = extractvalue %dx.types.CBufRet.f32 %69, 1
  %72 = extractvalue %dx.types.CBufRet.f32 %69, 3
  %73 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %74 = extractvalue %dx.types.CBufRet.f32 %73, 0
  %75 = extractvalue %dx.types.CBufRet.f32 %73, 1
  %76 = extractvalue %dx.types.CBufRet.f32 %73, 3
  %77 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 124)  ; CBufferLoadLegacy(handle,regIndex)
  %78 = extractvalue %dx.types.CBufRet.f32 %77, 0
  %79 = extractvalue %dx.types.CBufRet.f32 %77, 1
  %80 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 125)  ; CBufferLoadLegacy(handle,regIndex)
  %81 = extractvalue %dx.types.CBufRet.f32 %80, 2
  %82 = extractvalue %dx.types.CBufRet.f32 %80, 3
  %83 = fadd fast float %78, 5.000000e-01
  %84 = fadd fast float %79, 5.000000e-01
  %85 = fptosi float %83 to i32
  %86 = fptosi float %84 to i32
  %87 = fadd fast float %35, -5.000000e-01
  %88 = fadd fast float %36, -5.000000e-01
  %89 = fptoui float %87 to i32
  %90 = fptoui float %88 to i32
  %91 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %92 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %91, i32 0, i32 %89, i32 %90, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %93 = extractvalue %dx.types.ResRet.i32 %92, 0
  %94 = lshr i32 %93, 7
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %1353, label %96

; <label>:96                                      ; preds = %0
  %97 = and i32 %93, 127
  %98 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %27, %dx.types.ResourceProperties { i32 13, i32 188 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %99 = shl nuw nsw i32 %94, 3
  %100 = add nsw i32 %99, -8
  %101 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %102 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %101, i32 %100, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %103 = extractvalue %dx.types.ResRet.i32 %102, 0
  %104 = extractvalue %dx.types.ResRet.i32 %102, 1
  %105 = lshr i32 %103, 16
  %106 = and i32 %104, 16777215
  %107 = lshr i32 %104, 24
  %108 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %109 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %108, i32 %106, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %110 = extractvalue %dx.types.ResRet.f32 %109, 0
  %111 = bitcast float %110 to i32
  %112 = and i32 %111, 1048575
  %113 = mul nuw nsw i32 %112, 41
  %114 = add nuw nsw i32 %113, 1
  %115 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %116 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %115, i32 %114, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %117 = extractvalue %dx.types.ResRet.f32 %116, 0
  %118 = extractvalue %dx.types.ResRet.f32 %116, 1
  %119 = extractvalue %dx.types.ResRet.f32 %116, 2
  %120 = add i32 %106, %38
  %121 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %108, i32 %120, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %122 = extractvalue %dx.types.ResRet.f32 %121, 0
  %123 = extractvalue %dx.types.ResRet.f32 %121, 1
  %124 = extractvalue %dx.types.ResRet.f32 %121, 2
  %125 = extractvalue %dx.types.ResRet.f32 %121, 3
  %126 = bitcast float %122 to i32
  %127 = bitcast float %123 to i32
  %128 = bitcast float %124 to i32
  %129 = bitcast float %125 to i32
  %130 = shl i32 %38, 1
  %131 = add i32 %106, %130
  %132 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %108, i32 %131, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %133 = extractvalue %dx.types.ResRet.f32 %132, 0
  %134 = extractvalue %dx.types.ResRet.f32 %132, 1
  %135 = extractvalue %dx.types.ResRet.f32 %132, 2
  %136 = and i32 %126, 65535
  %137 = uitofp i32 %136 to float
  %138 = lshr i32 %126, 16
  %139 = uitofp i32 %138 to float
  %140 = and i32 %127, 32767
  %141 = uitofp i32 %140 to float
  %142 = fadd fast float %137, -3.276800e+04
  %143 = fadd fast float %139, -3.276800e+04
  %144 = fadd fast float %141, -1.638400e+04
  %145 = fmul fast float %144, 0x3F06A0F8E0000000
  %146 = and i32 %127, 32768
  %147 = icmp ne i32 %146, 0
  %148 = fadd fast float %142, %143
  %149 = fmul fast float %148, 0x3F00002000000000
  %150 = fsub fast float %142, %143
  %151 = fmul fast float %150, 0x3F00002000000000
  %152 = call float @dx.op.unary.f32(i32 6, float %149)  ; FAbs(value)
  %153 = call float @dx.op.unary.f32(i32 6, float %151)  ; FAbs(value)
  %154 = call float @dx.op.dot2.f32(i32 54, float 1.000000e+00, float 1.000000e+00, float %152, float %153)  ; Dot2(ax,ay,bx,by)
  %155 = fsub fast float 2.000000e+00, %154
  %156 = call float @dx.op.dot3.f32(i32 55, float %149, float %151, float %155, float %149, float %151, float %155)  ; Dot3(ax,ay,az,bx,by,bz)
  %157 = call float @dx.op.unary.f32(i32 25, float %156)  ; Rsqrt(value)
  %158 = fmul fast float %157, %149
  %159 = fmul fast float %157, %151
  %160 = fmul fast float %157, %155
  %161 = fadd fast float %160, 1.000000e+00
  %162 = fdiv fast float 1.000000e+00, %161
  %163 = fmul fast float %159, %158
  %164 = fmul fast float %163, %162
  %165 = fsub fast float -0.000000e+00, %164
  %166 = fmul fast float %158, %158
  %167 = fmul fast float %166, %162
  %168 = fsub fast float 1.000000e+00, %167
  %169 = fmul fast float %159, %159
  %170 = fmul fast float %169, %162
  %171 = fsub fast float 1.000000e+00, %170
  %172 = fmul fast float %145, %145
  %173 = fsub fast float 1.000000e+00, %172
  %174 = call float @dx.op.unary.f32(i32 24, float %173)  ; Sqrt(value)
  %175 = select i1 %147, float %145, float %174
  %176 = select i1 %147, float %174, float %145
  %177 = fmul fast float %168, %175
  %178 = fmul fast float %175, %165
  %179 = fmul fast float %175, %158
  %180 = fmul fast float %176, %165
  %181 = fmul fast float %171, %176
  %182 = fmul fast float %159, %176
  %183 = fsub fast float -0.000000e+00, %182
  %184 = fadd fast float %177, %180
  %185 = fadd fast float %178, %181
  %186 = fsub fast float %183, %179
  %187 = fmul fast float %186, %159
  %188 = fmul fast float %185, %160
  %189 = fsub fast float %187, %188
  %190 = fmul fast float %184, %160
  %191 = fmul fast float %186, %158
  %192 = fsub fast float %190, %191
  %193 = fmul fast float %185, %158
  %194 = fmul fast float %184, %159
  %195 = fsub fast float %193, %194
  %196 = lshr i32 %129, 16
  %197 = shl i32 %196, 23
  %198 = add i32 %197, -125829120
  %199 = bitcast i32 %198 to float
  %200 = lshr i32 %128, 16
  %201 = and i32 %128, 65535
  %202 = and i32 %129, 65535
  %203 = uitofp i32 %201 to float
  %204 = uitofp i32 %200 to float
  %205 = uitofp i32 %202 to float
  %206 = fadd fast float %203, -3.276800e+04
  %207 = fadd fast float %204, -3.276800e+04
  %208 = fadd fast float %205, -3.276800e+04
  %209 = fmul fast float %199, %206
  %210 = fmul fast float %199, %207
  %211 = fmul fast float %199, %208
  %212 = fmul fast float %184, %209
  %213 = fmul fast float %185, %209
  %214 = fmul fast float %186, %209
  %215 = fmul fast float %189, %210
  %216 = fmul fast float %192, %210
  %217 = fmul fast float %195, %210
  %218 = fmul fast float %158, %211
  %219 = fmul fast float %159, %211
  %220 = fmul fast float %160, %211
  %221 = call float @dx.op.unary.f32(i32 6, float %209)  ; FAbs(value)
  %222 = call float @dx.op.unary.f32(i32 6, float %210)  ; FAbs(value)
  %223 = call float @dx.op.unary.f32(i32 6, float %211)  ; FAbs(value)
  %224 = fdiv fast float 1.000000e+00, %221
  %225 = fdiv fast float 1.000000e+00, %222
  %226 = fdiv fast float 1.000000e+00, %223
  %227 = fsub fast float %117, %42
  %228 = fsub fast float %118, %43
  %229 = fsub fast float %119, %44
  %230 = fmul fast float %227, 2.097152e+06
  %231 = fmul fast float %228, 2.097152e+06
  %232 = fmul fast float %229, 2.097152e+06
  %233 = fadd fast float %230, %46
  %234 = fadd fast float %233, %133
  %235 = fadd fast float %231, %47
  %236 = fadd fast float %235, %134
  %237 = fadd fast float %232, %48
  %238 = fadd fast float %237, %135
  %239 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %98, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %240 = extractvalue %dx.types.CBufRet.i32 %239, 1
  %241 = call i32 @dx.op.binary.i32(i32 40, i32 %105, i32 %240)  ; UMin(a,b)
  %242 = shl i32 %241, 17
  %243 = sub nsw i32 %105, %240
  %244 = call i32 @dx.op.binary.i32(i32 37, i32 %243, i32 0)  ; IMax(a,b)
  %245 = shl i32 %244, 15
  %246 = add i32 %245, %242
  %247 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %248 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %247, i32 %246, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %249 = extractvalue %dx.types.ResRet.i32 %248, 0
  %250 = shl i32 %249, 4
  %251 = shl nuw nsw i32 %107, 4
  %252 = or i32 %246, %251
  %253 = add nsw i32 %252, 16
  %254 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %247, i32 %253, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %255 = extractvalue %dx.types.ResRet.i32 %254, 0
  %256 = extractvalue %dx.types.ResRet.i32 %254, 1
  %257 = extractvalue %dx.types.ResRet.i32 %254, 3
  %258 = add i32 %253, %250
  %259 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %247, i32 %258, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %260 = extractvalue %dx.types.ResRet.i32 %259, 0
  %261 = extractvalue %dx.types.ResRet.i32 %259, 1
  %262 = extractvalue %dx.types.ResRet.i32 %259, 2
  %263 = extractvalue %dx.types.ResRet.i32 %259, 3
  %264 = mul i32 %249, 80
  %265 = add i32 %253, %264
  %266 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %247, i32 %265, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %267 = extractvalue %dx.types.ResRet.i32 %266, 0
  %268 = extractvalue %dx.types.ResRet.i32 %266, 1
  %269 = extractvalue %dx.types.ResRet.i32 %266, 2
  %270 = lshr i32 %255, 9
  %271 = lshr i32 %256, 8
  %272 = and i32 %263, 15
  %273 = lshr i32 %263, 9
  %274 = and i32 %273, 31
  %275 = lshr i32 %263, 14
  %276 = and i32 %275, 31
  %277 = lshr i32 %263, 19
  %278 = and i32 %277, 31
  %279 = lshr i32 %263, 24
  %280 = and i32 %279, 15
  %281 = lshr i32 %263, 28
  %282 = and i32 %267, 4194303
  %283 = lshr i32 %267, 22
  %284 = and i32 %268, 4194303
  %285 = and i32 %268, 4194304
  %286 = icmp ne i32 %285, 0
  %287 = and i32 %268, 58720256
  %288 = add nuw nsw i32 %272, 10
  %289 = mul nuw nsw i32 %288, %97
  %290 = add i32 %271, %246
  %291 = lshr i32 %289, 5
  %292 = shl nuw nsw i32 %291, 2
  %293 = add i32 %290, %292
  %294 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %247, i32 %293, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %295 = extractvalue %dx.types.ResRet.i32 %294, 0
  %296 = extractvalue %dx.types.ResRet.i32 %294, 1
  %297 = and i32 %289, 31
  %298 = lshr i32 %295, %297
  %299 = icmp ne i32 %297, 0
  %300 = sub nsw i32 0, %289
  %301 = and i32 %300, 31
  %302 = shl i32 %296, %301
  %303 = select i1 %299, i32 %302, i32 0
  %304 = or i32 %303, %298
  %305 = shl i32 1, %272
  %306 = add i32 %305, -1
  %307 = and i32 %304, %306
  %308 = lshr i32 %304, %272
  %309 = and i32 %308, 31
  %310 = add nuw nsw i32 %272, 5
  %311 = lshr i32 %304, %310
  %312 = and i32 %311, 31
  %313 = add i32 %309, %307
  %314 = add i32 %312, %307
  %315 = add nuw nsw i32 %274, %276
  %316 = add nuw nsw i32 %315, %278
  %317 = mul i32 %307, %316
  %318 = add i32 %270, %246
  %319 = lshr i32 %317, 5
  %320 = shl nuw nsw i32 %319, 2
  %321 = add i32 %318, %320
  %322 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %247, i32 %321, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %323 = extractvalue %dx.types.ResRet.i32 %322, 0
  %324 = extractvalue %dx.types.ResRet.i32 %322, 1
  %325 = extractvalue %dx.types.ResRet.i32 %322, 2
  %326 = and i32 %317, 31
  %327 = lshr i32 %323, %326
  %328 = icmp ne i32 %326, 0
  %329 = sub i32 0, %317
  %330 = and i32 %329, 31
  %331 = shl i32 %324, %330
  %332 = select i1 %328, i32 %331, i32 0
  %333 = or i32 %332, %327
  %334 = lshr i32 %324, %326
  %335 = shl i32 %325, %330
  %336 = select i1 %328, i32 %335, i32 0
  %337 = or i32 %336, %334
  %338 = shl i32 1, %274
  %339 = add i32 %338, -1
  %340 = and i32 %333, %339
  %341 = lshr i32 %333, %274
  %342 = icmp ne i32 %274, 0
  %343 = sub nsw i32 0, %273
  %344 = and i32 %343, 31
  %345 = shl i32 %337, %344
  %346 = select i1 %342, i32 %345, i32 0
  %347 = or i32 %346, %341
  %348 = lshr i32 %337, %274
  %349 = shl i32 1, %276
  %350 = add i32 %349, -1
  %351 = and i32 %347, %350
  %352 = lshr i32 %347, %276
  %353 = icmp ne i32 %276, 0
  %354 = sub nsw i32 0, %275
  %355 = and i32 %354, 31
  %356 = shl i32 %348, %355
  %357 = select i1 %353, i32 %356, i32 0
  %358 = or i32 %352, %357
  %359 = shl i32 1, %278
  %360 = add i32 %359, -1
  %361 = and i32 %358, %360
  %362 = shl i32 %263, 19
  %363 = and i32 %362, 260046848
  %364 = sub nsw i32 1132462080, %363
  %365 = bitcast i32 %364 to float
  %366 = add i32 %340, %260
  %367 = add i32 %351, %261
  %368 = add i32 %361, %262
  %369 = sitofp i32 %366 to float
  %370 = sitofp i32 %367 to float
  %371 = sitofp i32 %368 to float
  %372 = fmul fast float %369, %365
  %373 = fmul fast float %370, %365
  %374 = fmul fast float %371, %365
  %375 = mul i32 %313, %316
  %376 = lshr i32 %375, 5
  %377 = shl nuw nsw i32 %376, 2
  %378 = add i32 %318, %377
  %379 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %247, i32 %378, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %380 = extractvalue %dx.types.ResRet.i32 %379, 0
  %381 = extractvalue %dx.types.ResRet.i32 %379, 1
  %382 = extractvalue %dx.types.ResRet.i32 %379, 2
  %383 = and i32 %375, 31
  %384 = lshr i32 %380, %383
  %385 = icmp ne i32 %383, 0
  %386 = sub i32 0, %375
  %387 = and i32 %386, 31
  %388 = shl i32 %381, %387
  %389 = select i1 %385, i32 %388, i32 0
  %390 = or i32 %389, %384
  %391 = lshr i32 %381, %383
  %392 = shl i32 %382, %387
  %393 = select i1 %385, i32 %392, i32 0
  %394 = or i32 %393, %391
  %395 = and i32 %390, %339
  %396 = lshr i32 %390, %274
  %397 = shl i32 %394, %344
  %398 = select i1 %342, i32 %397, i32 0
  %399 = or i32 %398, %396
  %400 = lshr i32 %394, %274
  %401 = and i32 %399, %350
  %402 = lshr i32 %399, %276
  %403 = shl i32 %400, %355
  %404 = select i1 %353, i32 %403, i32 0
  %405 = or i32 %402, %404
  %406 = and i32 %405, %360
  %407 = add i32 %395, %260
  %408 = add i32 %401, %261
  %409 = add i32 %406, %262
  %410 = sitofp i32 %407 to float
  %411 = sitofp i32 %408 to float
  %412 = sitofp i32 %409 to float
  %413 = fmul fast float %410, %365
  %414 = fmul fast float %411, %365
  %415 = fmul fast float %412, %365
  %416 = mul i32 %314, %316
  %417 = lshr i32 %416, 5
  %418 = shl nuw nsw i32 %417, 2
  %419 = add i32 %318, %418
  %420 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %247, i32 %419, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %421 = extractvalue %dx.types.ResRet.i32 %420, 0
  %422 = extractvalue %dx.types.ResRet.i32 %420, 1
  %423 = extractvalue %dx.types.ResRet.i32 %420, 2
  %424 = and i32 %416, 31
  %425 = lshr i32 %421, %424
  %426 = icmp ne i32 %424, 0
  %427 = sub i32 0, %416
  %428 = and i32 %427, 31
  %429 = shl i32 %422, %428
  %430 = select i1 %426, i32 %429, i32 0
  %431 = or i32 %430, %425
  %432 = lshr i32 %422, %424
  %433 = shl i32 %423, %428
  %434 = select i1 %426, i32 %433, i32 0
  %435 = or i32 %434, %432
  %436 = and i32 %431, %339
  %437 = lshr i32 %431, %274
  %438 = shl i32 %435, %344
  %439 = select i1 %342, i32 %438, i32 0
  %440 = or i32 %439, %437
  %441 = lshr i32 %435, %274
  %442 = and i32 %440, %350
  %443 = lshr i32 %440, %276
  %444 = shl i32 %441, %355
  %445 = select i1 %353, i32 %444, i32 0
  %446 = or i32 %443, %445
  %447 = and i32 %446, %360
  %448 = add i32 %436, %260
  %449 = add i32 %442, %261
  %450 = add i32 %447, %262
  %451 = sitofp i32 %448 to float
  %452 = sitofp i32 %449 to float
  %453 = sitofp i32 %450 to float
  %454 = fmul fast float %451, %365
  %455 = fmul fast float %452, %365
  %456 = fmul fast float %453, %365
  %457 = add i32 %284, %246
  %458 = add i32 %282, %246
  %459 = and i32 %257, 15
  %460 = lshr i32 %257, 4
  %461 = and i32 %460, 15
  %462 = lshr i32 %257, 8
  %463 = and i32 %462, 15
  %464 = lshr i32 %257, 12
  %465 = and i32 %464, 15
  %466 = mul i32 %307, %283
  %467 = shl nuw nsw i32 %280, 1
  %468 = ashr i32 %466, 5
  %469 = shl nsw i32 %468, 2
  %470 = add i32 %469, %458
  %471 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %247, i32 %470, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %472 = extractvalue %dx.types.ResRet.i32 %471, 0
  %473 = extractvalue %dx.types.ResRet.i32 %471, 1
  %474 = extractvalue %dx.types.ResRet.i32 %471, 2
  %475 = extractvalue %dx.types.ResRet.i32 %471, 3
  %476 = and i32 %466, 31
  %477 = lshr i32 %472, %476
  %478 = icmp ne i32 %476, 0
  %479 = sub i32 0, %466
  %480 = and i32 %479, 31
  %481 = shl i32 %473, %480
  %482 = select i1 %478, i32 %481, i32 0
  %483 = or i32 %482, %477
  %484 = lshr i32 %473, %476
  %485 = shl i32 %474, %480
  %486 = select i1 %478, i32 %485, i32 0
  %487 = or i32 %486, %484
  %488 = lshr i32 %474, %476
  %489 = shl i32 %475, %480
  %490 = select i1 %478, i32 %489, i32 0
  %491 = or i32 %490, %488
  %492 = shl i32 1, %467
  %493 = add i32 %492, -1
  %494 = and i32 %483, %493
  %495 = shl i32 1, %280
  %496 = add i32 %495, -1
  %497 = and i32 %494, %496
  %498 = lshr i32 %494, %280
  %499 = and i32 %498, %496
  %500 = uitofp i32 %497 to float
  %501 = uitofp i32 %499 to float
  %502 = uitofp i32 %496 to float
  %503 = fdiv fast float 2.000000e+00, %502
  %504 = fmul fast float %500, %503
  %505 = fmul fast float %501, %503
  %506 = fadd fast float %504, -1.000000e+00
  %507 = fadd fast float %505, -1.000000e+00
  %508 = call float @dx.op.unary.f32(i32 6, float %506)  ; FAbs(value)
  %509 = fsub fast float 1.000000e+00, %508
  %510 = call float @dx.op.unary.f32(i32 6, float %507)  ; FAbs(value)
  %511 = fsub fast float %509, %510
  %512 = fsub fast float -0.000000e+00, %511
  %513 = call float @dx.op.unary.f32(i32 7, float %512)  ; Saturate(value)
  %514 = fsub fast float -0.000000e+00, %513
  %515 = fcmp fast oge float %506, 0.000000e+00
  %516 = fcmp fast oge float %507, 0.000000e+00
  %517 = select i1 %515, float %514, float %513
  %518 = select i1 %516, float %514, float %513
  %519 = fadd fast float %517, %506
  %520 = fadd fast float %518, %507
  %521 = call float @dx.op.dot3.f32(i32 55, float %519, float %520, float %511, float %519, float %520, float %511)  ; Dot3(ax,ay,az,bx,by,bz)
  %522 = call float @dx.op.unary.f32(i32 25, float %521)  ; Rsqrt(value)
  %523 = fmul fast float %519, %522
  %524 = fmul fast float %520, %522
  %525 = fmul fast float %522, %511
  %526 = add nuw nsw i32 %281, 1
  %527 = select i1 %286, i32 %526, i32 0
  %528 = add nsw i32 %466, %467
  %529 = lshr i32 %483, %467
  %530 = icmp ne i32 %280, 0
  %531 = sub nsw i32 0, %467
  %532 = and i32 %531, 30
  %533 = shl i32 %487, %532
  %534 = select i1 %530, i32 %533, i32 0
  %535 = or i32 %534, %529
  %536 = lshr i32 %487, %467
  %537 = shl i32 %491, %532
  %538 = select i1 %530, i32 %537, i32 0
  %539 = or i32 %538, %536
  %540 = shl i32 1, %527
  %541 = add i32 %540, -1
  %542 = and i32 %535, %541
  br i1 %286, label %543, label %580, !dx.controlflow.hints !63

; <label>:543                                     ; preds = %96
  %544 = shl i32 1, %281
  %545 = and i32 %542, %544
  %546 = icmp ne i32 %545, 0
  %547 = add i32 %544, -1
  %548 = and i32 %542, %547
  %549 = call float @dx.op.unary.f32(i32 6, float %525)  ; FAbs(value)
  %550 = call float @dx.op.unary.f32(i32 6, float %523)  ; FAbs(value)
  %551 = fcmp fast ogt float %549, %550
  %552 = select i1 %551, float %525, float %523
  %553 = select i1 %551, float %523, float %525
  %554 = fsub fast float -0.000000e+00, %524
  %555 = fmul fast float %553, %552
  %556 = fmul fast float %553, %554
  %557 = fmul fast float %552, %552
  %558 = fmul fast float %524, %554
  %559 = fsub fast float %557, %558
  %560 = call float @dx.op.dot2.f32(i32 54, float %554, float %552, float %554, float %552)  ; Dot2(ax,ay,bx,by)
  %561 = call float @dx.op.unary.f32(i32 25, float %560)  ; Rsqrt(value)
  %562 = uitofp i32 %548 to float
  %563 = uitofp i32 %544 to float
  %564 = fdiv fast float 0x401921FB60000000, %563
  %565 = fmul fast float %564, %562
  %566 = call float @dx.op.unary.f32(i32 12, float %565)  ; Cos(value)
  %567 = fmul fast float %566, %561
  %568 = fmul fast float %567, %554
  %569 = fmul fast float %567, %552
  %570 = call float @dx.op.unary.f32(i32 13, float %565)  ; Sin(value)
  %571 = fmul fast float %570, %561
  %572 = fmul fast float %555, %571
  %573 = fmul fast float %556, %571
  %574 = fmul fast float %571, %559
  %575 = fsub fast float %568, %572
  %576 = fadd fast float %573, %569
  %577 = select i1 %551, float %574, float %575
  %578 = select i1 %551, float %575, float %574
  %579 = select i1 %546, float -1.000000e+00, float 1.000000e+00
  br label %580

; <label>:580                                     ; preds = %543, %96
  %581 = phi float [ %577, %543 ], [ 0.000000e+00, %96 ]
  %582 = phi float [ %576, %543 ], [ 0.000000e+00, %96 ]
  %583 = phi float [ %578, %543 ], [ 0.000000e+00, %96 ]
  %584 = phi float [ %579, %543 ], [ 0.000000e+00, %96 ]
  %585 = add nuw nsw i32 %527, %459
  %586 = add nuw nsw i32 %585, %461
  %587 = add nsw i32 %586, %528
  %588 = and i32 %586, 31
  %589 = lshr i32 %535, %588
  %590 = icmp ne i32 %588, 0
  %591 = sub nsw i32 0, %586
  %592 = and i32 %591, 31
  %593 = shl i32 %539, %592
  %594 = select i1 %590, i32 %593, i32 0
  %595 = or i32 %594, %589
  %596 = add nuw nsw i32 %463, %465
  %597 = mul i32 %313, %283
  %598 = ashr i32 %597, 5
  %599 = shl nsw i32 %598, 2
  %600 = add i32 %599, %458
  %601 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %247, i32 %600, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %602 = extractvalue %dx.types.ResRet.i32 %601, 0
  %603 = extractvalue %dx.types.ResRet.i32 %601, 1
  %604 = extractvalue %dx.types.ResRet.i32 %601, 2
  %605 = extractvalue %dx.types.ResRet.i32 %601, 3
  %606 = and i32 %597, 31
  %607 = lshr i32 %602, %606
  %608 = icmp ne i32 %606, 0
  %609 = sub i32 0, %597
  %610 = and i32 %609, 31
  %611 = shl i32 %603, %610
  %612 = select i1 %608, i32 %611, i32 0
  %613 = or i32 %612, %607
  %614 = lshr i32 %603, %606
  %615 = shl i32 %604, %610
  %616 = select i1 %608, i32 %615, i32 0
  %617 = or i32 %616, %614
  %618 = lshr i32 %604, %606
  %619 = shl i32 %605, %610
  %620 = select i1 %608, i32 %619, i32 0
  %621 = or i32 %620, %618
  %622 = and i32 %613, %493
  %623 = and i32 %622, %496
  %624 = lshr i32 %622, %280
  %625 = and i32 %624, %496
  %626 = uitofp i32 %623 to float
  %627 = uitofp i32 %625 to float
  %628 = fmul fast float %626, %503
  %629 = fmul fast float %627, %503
  %630 = fadd fast float %628, -1.000000e+00
  %631 = fadd fast float %629, -1.000000e+00
  %632 = call float @dx.op.unary.f32(i32 6, float %630)  ; FAbs(value)
  %633 = fsub fast float 1.000000e+00, %632
  %634 = call float @dx.op.unary.f32(i32 6, float %631)  ; FAbs(value)
  %635 = fsub fast float %633, %634
  %636 = fsub fast float -0.000000e+00, %635
  %637 = call float @dx.op.unary.f32(i32 7, float %636)  ; Saturate(value)
  %638 = fsub fast float -0.000000e+00, %637
  %639 = fcmp fast oge float %630, 0.000000e+00
  %640 = fcmp fast oge float %631, 0.000000e+00
  %641 = select i1 %639, float %638, float %637
  %642 = select i1 %640, float %638, float %637
  %643 = fadd fast float %641, %630
  %644 = fadd fast float %642, %631
  %645 = call float @dx.op.dot3.f32(i32 55, float %643, float %644, float %635, float %643, float %644, float %635)  ; Dot3(ax,ay,az,bx,by,bz)
  %646 = call float @dx.op.unary.f32(i32 25, float %645)  ; Rsqrt(value)
  %647 = fmul fast float %643, %646
  %648 = fmul fast float %644, %646
  %649 = fmul fast float %646, %635
  %650 = add nsw i32 %597, %467
  %651 = lshr i32 %613, %467
  %652 = shl i32 %617, %532
  %653 = select i1 %530, i32 %652, i32 0
  %654 = or i32 %653, %651
  %655 = lshr i32 %617, %467
  %656 = shl i32 %621, %532
  %657 = select i1 %530, i32 %656, i32 0
  %658 = or i32 %657, %655
  %659 = and i32 %654, %541
  br i1 %286, label %660, label %697, !dx.controlflow.hints !63

; <label>:660                                     ; preds = %580
  %661 = shl i32 1, %281
  %662 = and i32 %659, %661
  %663 = icmp ne i32 %662, 0
  %664 = add i32 %661, -1
  %665 = and i32 %659, %664
  %666 = call float @dx.op.unary.f32(i32 6, float %649)  ; FAbs(value)
  %667 = call float @dx.op.unary.f32(i32 6, float %647)  ; FAbs(value)
  %668 = fcmp fast ogt float %666, %667
  %669 = select i1 %668, float %649, float %647
  %670 = select i1 %668, float %647, float %649
  %671 = fsub fast float -0.000000e+00, %648
  %672 = fmul fast float %670, %669
  %673 = fmul fast float %670, %671
  %674 = fmul fast float %669, %669
  %675 = fmul fast float %648, %671
  %676 = fsub fast float %674, %675
  %677 = call float @dx.op.dot2.f32(i32 54, float %671, float %669, float %671, float %669)  ; Dot2(ax,ay,bx,by)
  %678 = call float @dx.op.unary.f32(i32 25, float %677)  ; Rsqrt(value)
  %679 = uitofp i32 %665 to float
  %680 = uitofp i32 %661 to float
  %681 = fdiv fast float 0x401921FB60000000, %680
  %682 = fmul fast float %681, %679
  %683 = call float @dx.op.unary.f32(i32 12, float %682)  ; Cos(value)
  %684 = fmul fast float %683, %678
  %685 = fmul fast float %684, %671
  %686 = fmul fast float %684, %669
  %687 = call float @dx.op.unary.f32(i32 13, float %682)  ; Sin(value)
  %688 = fmul fast float %687, %678
  %689 = fmul fast float %672, %688
  %690 = fmul fast float %673, %688
  %691 = fmul fast float %688, %676
  %692 = fsub fast float %685, %689
  %693 = fadd fast float %690, %686
  %694 = select i1 %668, float %691, float %692
  %695 = select i1 %668, float %692, float %691
  %696 = select i1 %663, float -1.000000e+00, float 1.000000e+00
  br label %697

; <label>:697                                     ; preds = %660, %580
  %698 = phi float [ %694, %660 ], [ 0.000000e+00, %580 ]
  %699 = phi float [ %693, %660 ], [ 0.000000e+00, %580 ]
  %700 = phi float [ %695, %660 ], [ 0.000000e+00, %580 ]
  %701 = phi float [ %696, %660 ], [ 0.000000e+00, %580 ]
  %702 = add nsw i32 %586, %650
  %703 = and i32 %586, 31
  %704 = lshr i32 %654, %703
  %705 = icmp ne i32 %703, 0
  %706 = sub nsw i32 0, %586
  %707 = and i32 %706, 31
  %708 = shl i32 %658, %707
  %709 = select i1 %705, i32 %708, i32 0
  %710 = or i32 %709, %704
  %711 = mul i32 %314, %283
  %712 = ashr i32 %711, 5
  %713 = shl nsw i32 %712, 2
  %714 = add i32 %713, %458
  %715 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %247, i32 %714, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %716 = extractvalue %dx.types.ResRet.i32 %715, 0
  %717 = extractvalue %dx.types.ResRet.i32 %715, 1
  %718 = extractvalue %dx.types.ResRet.i32 %715, 2
  %719 = extractvalue %dx.types.ResRet.i32 %715, 3
  %720 = and i32 %711, 31
  %721 = lshr i32 %716, %720
  %722 = icmp ne i32 %720, 0
  %723 = sub i32 0, %711
  %724 = and i32 %723, 31
  %725 = shl i32 %717, %724
  %726 = select i1 %722, i32 %725, i32 0
  %727 = or i32 %726, %721
  %728 = lshr i32 %717, %720
  %729 = shl i32 %718, %724
  %730 = select i1 %722, i32 %729, i32 0
  %731 = or i32 %730, %728
  %732 = lshr i32 %718, %720
  %733 = shl i32 %719, %724
  %734 = select i1 %722, i32 %733, i32 0
  %735 = or i32 %734, %732
  %736 = and i32 %727, %493
  %737 = and i32 %736, %496
  %738 = lshr i32 %736, %280
  %739 = and i32 %738, %496
  %740 = uitofp i32 %737 to float
  %741 = uitofp i32 %739 to float
  %742 = fmul fast float %740, %503
  %743 = fmul fast float %741, %503
  %744 = fadd fast float %742, -1.000000e+00
  %745 = fadd fast float %743, -1.000000e+00
  %746 = call float @dx.op.unary.f32(i32 6, float %744)  ; FAbs(value)
  %747 = fsub fast float 1.000000e+00, %746
  %748 = call float @dx.op.unary.f32(i32 6, float %745)  ; FAbs(value)
  %749 = fsub fast float %747, %748
  %750 = fsub fast float -0.000000e+00, %749
  %751 = call float @dx.op.unary.f32(i32 7, float %750)  ; Saturate(value)
  %752 = fsub fast float -0.000000e+00, %751
  %753 = fcmp fast oge float %744, 0.000000e+00
  %754 = fcmp fast oge float %745, 0.000000e+00
  %755 = select i1 %753, float %752, float %751
  %756 = select i1 %754, float %752, float %751
  %757 = fadd fast float %755, %744
  %758 = fadd fast float %756, %745
  %759 = call float @dx.op.dot3.f32(i32 55, float %757, float %758, float %749, float %757, float %758, float %749)  ; Dot3(ax,ay,az,bx,by,bz)
  %760 = call float @dx.op.unary.f32(i32 25, float %759)  ; Rsqrt(value)
  %761 = fmul fast float %757, %760
  %762 = fmul fast float %758, %760
  %763 = fmul fast float %760, %749
  %764 = add nsw i32 %711, %467
  %765 = lshr i32 %727, %467
  %766 = shl i32 %731, %532
  %767 = select i1 %530, i32 %766, i32 0
  %768 = or i32 %767, %765
  %769 = lshr i32 %731, %467
  %770 = shl i32 %735, %532
  %771 = select i1 %530, i32 %770, i32 0
  %772 = or i32 %771, %769
  %773 = and i32 %768, %541
  br i1 %286, label %774, label %811, !dx.controlflow.hints !63

; <label>:774                                     ; preds = %697
  %775 = shl i32 1, %281
  %776 = and i32 %773, %775
  %777 = icmp ne i32 %776, 0
  %778 = add i32 %775, -1
  %779 = and i32 %773, %778
  %780 = call float @dx.op.unary.f32(i32 6, float %763)  ; FAbs(value)
  %781 = call float @dx.op.unary.f32(i32 6, float %761)  ; FAbs(value)
  %782 = fcmp fast ogt float %780, %781
  %783 = select i1 %782, float %763, float %761
  %784 = select i1 %782, float %761, float %763
  %785 = fsub fast float -0.000000e+00, %762
  %786 = fmul fast float %784, %783
  %787 = fmul fast float %784, %785
  %788 = fmul fast float %783, %783
  %789 = fmul fast float %762, %785
  %790 = fsub fast float %788, %789
  %791 = call float @dx.op.dot2.f32(i32 54, float %785, float %783, float %785, float %783)  ; Dot2(ax,ay,bx,by)
  %792 = call float @dx.op.unary.f32(i32 25, float %791)  ; Rsqrt(value)
  %793 = uitofp i32 %779 to float
  %794 = uitofp i32 %775 to float
  %795 = fdiv fast float 0x401921FB60000000, %794
  %796 = fmul fast float %795, %793
  %797 = call float @dx.op.unary.f32(i32 12, float %796)  ; Cos(value)
  %798 = fmul fast float %797, %792
  %799 = fmul fast float %798, %785
  %800 = fmul fast float %798, %783
  %801 = call float @dx.op.unary.f32(i32 13, float %796)  ; Sin(value)
  %802 = fmul fast float %801, %792
  %803 = fmul fast float %786, %802
  %804 = fmul fast float %787, %802
  %805 = fmul fast float %802, %790
  %806 = fsub fast float %799, %803
  %807 = fadd fast float %804, %800
  %808 = select i1 %782, float %805, float %806
  %809 = select i1 %782, float %806, float %805
  %810 = select i1 %777, float -1.000000e+00, float 1.000000e+00
  br label %811

; <label>:811                                     ; preds = %774, %697
  %812 = phi float [ %808, %774 ], [ 0.000000e+00, %697 ]
  %813 = phi float [ %807, %774 ], [ 0.000000e+00, %697 ]
  %814 = phi float [ %809, %774 ], [ 0.000000e+00, %697 ]
  %815 = phi float [ %810, %774 ], [ 0.000000e+00, %697 ]
  %816 = add nsw i32 %586, %764
  %817 = and i32 %586, 31
  %818 = lshr i32 %768, %817
  %819 = icmp ne i32 %817, 0
  %820 = sub nsw i32 0, %586
  %821 = and i32 %820, 31
  %822 = shl i32 %772, %821
  %823 = select i1 %819, i32 %822, i32 0
  %824 = or i32 %823, %818
  %825 = and i32 %269, 15
  %826 = lshr i32 %269, 4
  %827 = and i32 %826, 15
  %828 = lshr i32 %595, %596
  %829 = shl i32 1, %825
  %830 = add i32 %829, -1
  %831 = and i32 %828, %830
  %832 = add nuw nsw i32 %596, %825
  %833 = add nsw i32 %832, %587
  %834 = ashr i32 %833, 5
  %835 = shl nsw i32 %834, 2
  %836 = add i32 %835, %458
  %837 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %838 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %837, i32 %836, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %839 = extractvalue %dx.types.ResRet.i32 %838, 0
  %840 = extractvalue %dx.types.ResRet.i32 %838, 1
  %841 = and i32 %833, 31
  %842 = lshr i32 %839, %841
  %843 = icmp ne i32 %841, 0
  %844 = sub i32 0, %833
  %845 = and i32 %844, 31
  %846 = shl i32 %840, %845
  %847 = select i1 %843, i32 %846, i32 0
  %848 = or i32 %847, %842
  %849 = shl i32 1, %827
  %850 = add i32 %849, -1
  %851 = and i32 %848, %850
  %852 = lshr i32 %710, %596
  %853 = and i32 %852, %830
  %854 = add nsw i32 %832, %702
  %855 = ashr i32 %854, 5
  %856 = shl nsw i32 %855, 2
  %857 = add i32 %856, %458
  %858 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %859 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %858, i32 %857, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %860 = extractvalue %dx.types.ResRet.i32 %859, 0
  %861 = extractvalue %dx.types.ResRet.i32 %859, 1
  %862 = and i32 %854, 31
  %863 = lshr i32 %860, %862
  %864 = icmp ne i32 %862, 0
  %865 = sub i32 0, %854
  %866 = and i32 %865, 31
  %867 = shl i32 %861, %866
  %868 = select i1 %864, i32 %867, i32 0
  %869 = or i32 %868, %863
  %870 = and i32 %869, %850
  %871 = lshr i32 %824, %596
  %872 = and i32 %871, %830
  %873 = add nsw i32 %832, %816
  %874 = ashr i32 %873, 5
  %875 = shl nsw i32 %874, 2
  %876 = add i32 %875, %458
  %877 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %878 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %877, i32 %876, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %879 = extractvalue %dx.types.ResRet.i32 %878, 0
  %880 = extractvalue %dx.types.ResRet.i32 %878, 1
  %881 = and i32 %873, 31
  %882 = lshr i32 %879, %881
  %883 = icmp ne i32 %881, 0
  %884 = sub i32 0, %873
  %885 = and i32 %884, 31
  %886 = shl i32 %880, %885
  %887 = select i1 %883, i32 %886, i32 0
  %888 = or i32 %887, %882
  %889 = and i32 %888, %850
  %890 = icmp eq i32 %287, 0
  br i1 %890, label %942, label %891, !dx.controlflow.hints !64

; <label>:891                                     ; preds = %811
  %892 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %893 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %892, i32 %457, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %894 = extractvalue %dx.types.ResRet.i32 %893, 0
  %895 = extractvalue %dx.types.ResRet.i32 %893, 1
  %896 = extractvalue %dx.types.ResRet.i32 %893, 2
  %897 = extractvalue %dx.types.ResRet.i32 %893, 3
  %898 = add i32 %457, 16
  %899 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %892, i32 %898, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %900 = extractvalue %dx.types.ResRet.i32 %899, 0
  %901 = extractvalue %dx.types.ResRet.i32 %899, 1
  %902 = extractvalue %dx.types.ResRet.i32 %899, 2
  %903 = icmp ugt i32 %831, %896
  %904 = icmp ugt i32 %851, %897
  %905 = select i1 %903, i32 %900, i32 0
  %906 = select i1 %904, i32 %901, i32 0
  %907 = shl i32 %902, 23
  %908 = sub nsw i32 1065353216, %907
  %909 = bitcast i32 %908 to float
  %910 = add i32 %894, %831
  %911 = add i32 %910, %905
  %912 = add i32 %895, %851
  %913 = add i32 %912, %906
  %914 = sitofp i32 %911 to float
  %915 = sitofp i32 %913 to float
  %916 = fmul fast float %914, %909
  %917 = fmul fast float %915, %909
  %918 = icmp ugt i32 %853, %896
  %919 = icmp ugt i32 %870, %897
  %920 = select i1 %918, i32 %900, i32 0
  %921 = select i1 %919, i32 %901, i32 0
  %922 = add i32 %894, %853
  %923 = add i32 %922, %920
  %924 = add i32 %895, %870
  %925 = add i32 %924, %921
  %926 = sitofp i32 %923 to float
  %927 = sitofp i32 %925 to float
  %928 = fmul fast float %926, %909
  %929 = fmul fast float %927, %909
  %930 = icmp ugt i32 %872, %896
  %931 = icmp ugt i32 %889, %897
  %932 = select i1 %930, i32 %900, i32 0
  %933 = select i1 %931, i32 %901, i32 0
  %934 = add i32 %894, %872
  %935 = add i32 %934, %932
  %936 = add i32 %895, %889
  %937 = add i32 %936, %933
  %938 = sitofp i32 %935 to float
  %939 = sitofp i32 %937 to float
  %940 = fmul fast float %938, %909
  %941 = fmul fast float %939, %909
  br label %942

; <label>:942                                     ; preds = %891, %811
  %943 = phi float [ 0.000000e+00, %811 ], [ %940, %891 ]
  %944 = phi float [ 0.000000e+00, %811 ], [ %928, %891 ]
  %945 = phi float [ 0.000000e+00, %811 ], [ %916, %891 ]
  %946 = phi float [ 0.000000e+00, %811 ], [ %941, %891 ]
  %947 = phi float [ 0.000000e+00, %811 ], [ %929, %891 ]
  %948 = phi float [ 0.000000e+00, %811 ], [ %917, %891 ]
  %949 = fmul fast float %372, %212
  %950 = call float @dx.op.tertiary.f32(i32 46, float %373, float %215, float %949)  ; FMad(a,b,c)
  %951 = call float @dx.op.tertiary.f32(i32 46, float %374, float %218, float %950)  ; FMad(a,b,c)
  %952 = fadd fast float %951, %234
  %953 = fmul fast float %372, %213
  %954 = call float @dx.op.tertiary.f32(i32 46, float %373, float %216, float %953)  ; FMad(a,b,c)
  %955 = call float @dx.op.tertiary.f32(i32 46, float %374, float %219, float %954)  ; FMad(a,b,c)
  %956 = fadd fast float %955, %236
  %957 = fmul fast float %372, %214
  %958 = call float @dx.op.tertiary.f32(i32 46, float %373, float %217, float %957)  ; FMad(a,b,c)
  %959 = call float @dx.op.tertiary.f32(i32 46, float %374, float %220, float %958)  ; FMad(a,b,c)
  %960 = fadd fast float %959, %238
  %961 = fmul fast float %952, %62
  %962 = call float @dx.op.tertiary.f32(i32 46, float %956, float %66, float %961)  ; FMad(a,b,c)
  %963 = call float @dx.op.tertiary.f32(i32 46, float %960, float %70, float %962)  ; FMad(a,b,c)
  %964 = fadd fast float %963, %74
  %965 = fmul fast float %952, %63
  %966 = call float @dx.op.tertiary.f32(i32 46, float %956, float %67, float %965)  ; FMad(a,b,c)
  %967 = call float @dx.op.tertiary.f32(i32 46, float %960, float %71, float %966)  ; FMad(a,b,c)
  %968 = fadd fast float %967, %75
  %969 = fmul fast float %952, %64
  %970 = call float @dx.op.tertiary.f32(i32 46, float %956, float %68, float %969)  ; FMad(a,b,c)
  %971 = call float @dx.op.tertiary.f32(i32 46, float %960, float %72, float %970)  ; FMad(a,b,c)
  %972 = fadd fast float %971, %76
  %973 = fmul fast float %413, %212
  %974 = call float @dx.op.tertiary.f32(i32 46, float %414, float %215, float %973)  ; FMad(a,b,c)
  %975 = call float @dx.op.tertiary.f32(i32 46, float %415, float %218, float %974)  ; FMad(a,b,c)
  %976 = fadd fast float %975, %234
  %977 = fmul fast float %413, %213
  %978 = call float @dx.op.tertiary.f32(i32 46, float %414, float %216, float %977)  ; FMad(a,b,c)
  %979 = call float @dx.op.tertiary.f32(i32 46, float %415, float %219, float %978)  ; FMad(a,b,c)
  %980 = fadd fast float %979, %236
  %981 = fmul fast float %413, %214
  %982 = call float @dx.op.tertiary.f32(i32 46, float %414, float %217, float %981)  ; FMad(a,b,c)
  %983 = call float @dx.op.tertiary.f32(i32 46, float %415, float %220, float %982)  ; FMad(a,b,c)
  %984 = fadd fast float %983, %238
  %985 = fmul fast float %976, %62
  %986 = call float @dx.op.tertiary.f32(i32 46, float %980, float %66, float %985)  ; FMad(a,b,c)
  %987 = call float @dx.op.tertiary.f32(i32 46, float %984, float %70, float %986)  ; FMad(a,b,c)
  %988 = fadd fast float %987, %74
  %989 = fmul fast float %976, %63
  %990 = call float @dx.op.tertiary.f32(i32 46, float %980, float %67, float %989)  ; FMad(a,b,c)
  %991 = call float @dx.op.tertiary.f32(i32 46, float %984, float %71, float %990)  ; FMad(a,b,c)
  %992 = fadd fast float %991, %75
  %993 = fmul fast float %976, %64
  %994 = call float @dx.op.tertiary.f32(i32 46, float %980, float %68, float %993)  ; FMad(a,b,c)
  %995 = call float @dx.op.tertiary.f32(i32 46, float %984, float %72, float %994)  ; FMad(a,b,c)
  %996 = fadd fast float %995, %76
  %997 = fmul fast float %454, %212
  %998 = call float @dx.op.tertiary.f32(i32 46, float %455, float %215, float %997)  ; FMad(a,b,c)
  %999 = call float @dx.op.tertiary.f32(i32 46, float %456, float %218, float %998)  ; FMad(a,b,c)
  %1000 = fadd fast float %999, %234
  %1001 = fmul fast float %454, %213
  %1002 = call float @dx.op.tertiary.f32(i32 46, float %455, float %216, float %1001)  ; FMad(a,b,c)
  %1003 = call float @dx.op.tertiary.f32(i32 46, float %456, float %219, float %1002)  ; FMad(a,b,c)
  %1004 = fadd fast float %1003, %236
  %1005 = fmul fast float %454, %214
  %1006 = call float @dx.op.tertiary.f32(i32 46, float %455, float %217, float %1005)  ; FMad(a,b,c)
  %1007 = call float @dx.op.tertiary.f32(i32 46, float %456, float %220, float %1006)  ; FMad(a,b,c)
  %1008 = fadd fast float %1007, %238
  %1009 = fmul fast float %1000, %62
  %1010 = call float @dx.op.tertiary.f32(i32 46, float %1004, float %66, float %1009)  ; FMad(a,b,c)
  %1011 = call float @dx.op.tertiary.f32(i32 46, float %1008, float %70, float %1010)  ; FMad(a,b,c)
  %1012 = fadd fast float %1011, %74
  %1013 = fmul fast float %1000, %63
  %1014 = call float @dx.op.tertiary.f32(i32 46, float %1004, float %67, float %1013)  ; FMad(a,b,c)
  %1015 = call float @dx.op.tertiary.f32(i32 46, float %1008, float %71, float %1014)  ; FMad(a,b,c)
  %1016 = fadd fast float %1015, %75
  %1017 = fmul fast float %1000, %64
  %1018 = call float @dx.op.tertiary.f32(i32 46, float %1004, float %68, float %1017)  ; FMad(a,b,c)
  %1019 = call float @dx.op.tertiary.f32(i32 46, float %1008, float %72, float %1018)  ; FMad(a,b,c)
  %1020 = fadd fast float %1019, %76
  %1021 = sitofp i32 %85 to float
  %1022 = sitofp i32 %86 to float
  %1023 = fsub fast float %35, %1021
  %1024 = fsub fast float %36, %1022
  %1025 = fmul fast float %81, 2.000000e+00
  %1026 = fmul fast float %1025, %1023
  %1027 = fmul fast float %82, 2.000000e+00
  %1028 = fmul fast float %1027, %1024
  %1029 = fadd fast float %1026, -1.000000e+00
  %1030 = fsub fast float 1.000000e+00, %1028
  %1031 = fdiv fast float 1.000000e+00, %972
  %1032 = fdiv fast float 1.000000e+00, %996
  %1033 = fdiv fast float 1.000000e+00, %1020
  %1034 = fmul fast float %1031, %964
  %1035 = fmul fast float %1031, %968
  %1036 = fmul fast float %1032, %988
  %1037 = fmul fast float %1032, %992
  %1038 = fmul fast float %1033, %1012
  %1039 = fmul fast float %1033, %1016
  %1040 = fsub fast float %1039, %1037
  %1041 = fsub fast float %1035, %1039
  %1042 = fsub fast float %1037, %1035
  %1043 = fsub fast float %1036, %1038
  %1044 = fsub fast float %1038, %1034
  %1045 = fsub fast float %1034, %1036
  %1046 = fsub fast float %1029, %1036
  %1047 = fsub fast float %1029, %1038
  %1048 = fsub fast float %1029, %1034
  %1049 = fmul fast float %1040, %1046
  %1050 = fmul fast float %1041, %1047
  %1051 = fmul fast float %1042, %1048
  %1052 = fsub fast float %1030, %1037
  %1053 = fsub fast float %1030, %1039
  %1054 = fsub fast float %1030, %1035
  %1055 = fmul fast float %1043, %1052
  %1056 = fmul fast float %1044, %1053
  %1057 = fmul fast float %1045, %1054
  %1058 = fadd fast float %1049, %1055
  %1059 = fadd fast float %1050, %1056
  %1060 = fadd fast float %1051, %1057
  %1061 = fmul fast float %1059, %1032
  %1062 = fmul fast float %1060, %1033
  %1063 = call float @dx.op.dot3.f32(i32 55, float %1058, float %1059, float %1060, float %1031, float %1032, float %1033)  ; Dot3(ax,ay,az,bx,by,bz)
  %1064 = fdiv fast float 1.000000e+00, %1063
  %1065 = fmul fast float %1064, %1031
  %1066 = fmul fast float %1065, %1058
  %1067 = fmul fast float %1061, %1064
  %1068 = fmul fast float %1062, %1064
  %1069 = fmul fast float %1042, %1033
  %1070 = fmul fast float %1045, %1033
  %1071 = call float @dx.op.dot3.f32(i32 55, float %1040, float %1041, float %1042, float %1031, float %1032, float %1033)  ; Dot3(ax,ay,az,bx,by,bz)
  %1072 = call float @dx.op.dot3.f32(i32 55, float %1043, float %1044, float %1045, float %1031, float %1032, float %1033)  ; Dot3(ax,ay,az,bx,by,bz)
  %1073 = fmul fast float %1063, %1032
  %1074 = fmul fast float %1073, %1041
  %1075 = fmul fast float %1069, %1063
  %1076 = fmul fast float %1061, %1071
  %1077 = fmul fast float %1062, %1071
  %1078 = fsub fast float %1074, %1076
  %1079 = fsub fast float %1075, %1077
  %1080 = fmul fast float %1064, %1064
  %1081 = fmul fast float %1080, %1025
  %1082 = fmul fast float %1081, %1078
  %1083 = fmul fast float %1081, %1079
  %1084 = fmul fast float %1073, %1044
  %1085 = fmul fast float %1070, %1063
  %1086 = fmul fast float %1061, %1072
  %1087 = fmul fast float %1062, %1072
  %1088 = fsub fast float %1084, %1086
  %1089 = fsub fast float %1085, %1087
  %1090 = fmul fast float %82, -2.000000e+00
  %1091 = fmul fast float %1080, %1090
  %1092 = fmul fast float %1091, %1088
  %1093 = fmul fast float %1091, %1089
  %1094 = fmul fast float %1066, %523
  %1095 = fmul fast float %1066, %524
  %1096 = fmul fast float %1066, %525
  %1097 = fmul fast float %1067, %647
  %1098 = fmul fast float %1067, %648
  %1099 = fmul fast float %1067, %649
  %1100 = fmul fast float %1068, %761
  %1101 = fmul fast float %1068, %762
  %1102 = fmul fast float %1068, %763
  %1103 = fadd fast float %1097, %1100
  %1104 = fadd fast float %1103, %1094
  %1105 = fadd fast float %1098, %1101
  %1106 = fadd fast float %1105, %1095
  %1107 = fadd fast float %1099, %1102
  %1108 = fadd fast float %1107, %1096
  %1109 = call float @dx.op.dot3.f32(i32 55, float %1104, float %1106, float %1108, float %1104, float %1106, float %1108)  ; Dot3(ax,ay,az,bx,by,bz)
  %1110 = call float @dx.op.unary.f32(i32 25, float %1109)  ; Rsqrt(value)
  %1111 = fmul fast float %1104, %1110
  %1112 = fmul fast float %1106, %1110
  %1113 = fmul fast float %1108, %1110
  br i1 %890, label %1114, label %1127

; <label>:1114                                    ; preds = %942
  %1115 = fmul fast float %1111, %226
  %1116 = fmul fast float %1112, %226
  %1117 = fmul fast float %1113, %226
  %1118 = fmul fast float %1115, %212
  %1119 = call float @dx.op.tertiary.f32(i32 46, float %1116, float %215, float %1118)  ; FMad(a,b,c)
  %1120 = call float @dx.op.tertiary.f32(i32 46, float %1117, float %218, float %1119)  ; FMad(a,b,c)
  %1121 = fmul fast float %1115, %213
  %1122 = call float @dx.op.tertiary.f32(i32 46, float %1116, float %216, float %1121)  ; FMad(a,b,c)
  %1123 = call float @dx.op.tertiary.f32(i32 46, float %1117, float %219, float %1122)  ; FMad(a,b,c)
  %1124 = fmul fast float %1115, %214
  %1125 = call float @dx.op.tertiary.f32(i32 46, float %1116, float %217, float %1124)  ; FMad(a,b,c)
  %1126 = call float @dx.op.tertiary.f32(i32 46, float %1117, float %220, float %1125)  ; FMad(a,b,c)
  br label %1304

; <label>:1127                                    ; preds = %942
  br i1 %286, label %1225, label %1128, !dx.controlflow.hints !65

; <label>:1128                                    ; preds = %1127
  %1129 = fsub fast float %410, %369
  %1130 = fmul fast float %365, %1129
  %1131 = fsub fast float %411, %370
  %1132 = fmul fast float %365, %1131
  %1133 = fsub fast float %412, %371
  %1134 = fmul fast float %365, %1133
  %1135 = fsub fast float %451, %369
  %1136 = fmul fast float %365, %1135
  %1137 = fsub fast float %452, %370
  %1138 = fmul fast float %365, %1137
  %1139 = fsub fast float %453, %371
  %1140 = fmul fast float %365, %1139
  %1141 = fsub fast float %944, %945
  %1142 = fsub fast float %947, %948
  %1143 = fsub fast float %943, %945
  %1144 = fsub fast float %946, %948
  %1145 = call float @dx.op.unary.f32(i32 6, float %1141)  ; FAbs(value)
  %1146 = call float @dx.op.unary.f32(i32 6, float %1143)  ; FAbs(value)
  %1147 = fadd fast float %1146, %1145
  %1148 = fcmp fast ogt float %1147, 0x3EB0C6F7A0000000
  br i1 %1148, label %1168, label %1149, !dx.controlflow.hints !66

; <label>:1149                                    ; preds = %1128
  %1150 = fcmp fast oge float %1113, 0.000000e+00
  %1151 = select i1 %1150, float 1.000000e+00, float -1.000000e+00
  %1152 = fadd fast float %1151, %1113
  %1153 = fdiv fast float 1.000000e+00, %1152
  %1154 = fsub fast float -0.000000e+00, %1153
  %1155 = fmul fast float %1111, %1112
  %1156 = fmul fast float %1155, %1154
  %1157 = fmul fast float %1111, %1111
  %1158 = fmul fast float %1157, %1151
  %1159 = fmul fast float %1158, %1154
  %1160 = fadd fast float %1159, 1.000000e+00
  %1161 = fmul fast float %1156, %1151
  %1162 = fmul fast float %1111, %1151
  %1163 = fsub fast float -0.000000e+00, %1162
  %1164 = fmul fast float %1112, %1112
  %1165 = fmul fast float %1164, %1154
  %1166 = fadd fast float %1165, %1151
  %1167 = fsub fast float -0.000000e+00, %1112
  br label %1258

; <label>:1168                                    ; preds = %1128
  %1169 = fmul fast float %1112, %1140
  %1170 = fmul fast float %1113, %1138
  %1171 = fsub fast float %1169, %1170
  %1172 = fmul fast float %1113, %1136
  %1173 = fmul fast float %1111, %1140
  %1174 = fsub fast float %1172, %1173
  %1175 = fmul fast float %1111, %1138
  %1176 = fmul fast float %1112, %1136
  %1177 = fsub fast float %1175, %1176
  %1178 = fmul fast float %1113, %1132
  %1179 = fmul fast float %1112, %1134
  %1180 = fsub fast float %1178, %1179
  %1181 = fmul fast float %1111, %1134
  %1182 = fmul fast float %1113, %1130
  %1183 = fsub fast float %1181, %1182
  %1184 = fmul fast float %1112, %1130
  %1185 = fmul fast float %1111, %1132
  %1186 = fsub fast float %1184, %1185
  %1187 = fmul fast float %1171, %1141
  %1188 = fmul fast float %1174, %1141
  %1189 = fmul fast float %1177, %1141
  %1190 = fmul fast float %1180, %1143
  %1191 = fmul fast float %1183, %1143
  %1192 = fmul fast float %1186, %1143
  %1193 = fadd fast float %1187, %1190
  %1194 = fadd fast float %1188, %1191
  %1195 = fadd fast float %1189, %1192
  %1196 = fmul fast float %1171, %1142
  %1197 = fmul fast float %1174, %1142
  %1198 = fmul fast float %1177, %1142
  %1199 = fmul fast float %1180, %1144
  %1200 = fmul fast float %1183, %1144
  %1201 = fmul fast float %1186, %1144
  %1202 = fadd fast float %1196, %1199
  %1203 = fadd fast float %1197, %1200
  %1204 = fadd fast float %1198, %1201
  %1205 = call float @dx.op.dot3.f32(i32 55, float %1193, float %1194, float %1195, float %1193, float %1194, float %1195)  ; Dot3(ax,ay,az,bx,by,bz)
  %1206 = call float @dx.op.unary.f32(i32 25, float %1205)  ; Rsqrt(value)
  %1207 = fmul fast float %1206, %1193
  %1208 = fmul fast float %1206, %1194
  %1209 = fmul fast float %1206, %1195
  %1210 = fmul fast float %1209, %1112
  %1211 = fmul fast float %1208, %1113
  %1212 = fsub fast float %1210, %1211
  %1213 = fmul fast float %1207, %1113
  %1214 = fmul fast float %1209, %1111
  %1215 = fsub fast float %1213, %1214
  %1216 = fmul fast float %1208, %1111
  %1217 = fmul fast float %1207, %1112
  %1218 = fsub fast float %1216, %1217
  %1219 = call float @dx.op.dot3.f32(i32 55, float %1202, float %1203, float %1204, float %1212, float %1215, float %1218)  ; Dot3(ax,ay,az,bx,by,bz)
  %1220 = fcmp fast olt float %1219, 0.000000e+00
  %1221 = select i1 %1220, float -1.000000e+00, float 1.000000e+00
  %1222 = fmul fast float %1212, %1221
  %1223 = fmul fast float %1215, %1221
  %1224 = fmul fast float %1218, %1221
  br label %1258

; <label>:1225                                    ; preds = %1127
  %1226 = fmul fast float %1066, %581
  %1227 = fmul fast float %1066, %582
  %1228 = fmul fast float %1066, %583
  %1229 = fmul fast float %1066, %584
  %1230 = fmul fast float %1067, %698
  %1231 = fmul fast float %1067, %699
  %1232 = fmul fast float %1067, %700
  %1233 = fmul fast float %1067, %701
  %1234 = fmul fast float %1068, %812
  %1235 = fmul fast float %1068, %813
  %1236 = fmul fast float %1068, %814
  %1237 = fmul fast float %1068, %815
  %1238 = fadd fast float %1230, %1234
  %1239 = fadd fast float %1238, %1226
  %1240 = fadd fast float %1231, %1235
  %1241 = fadd fast float %1240, %1227
  %1242 = fadd fast float %1232, %1236
  %1243 = fadd fast float %1242, %1228
  %1244 = fadd fast float %1233, %1237
  %1245 = fadd fast float %1244, %1229
  %1246 = fmul fast float %1106, %1243
  %1247 = fmul fast float %1108, %1241
  %1248 = fsub fast float %1246, %1247
  %1249 = fmul fast float %1108, %1239
  %1250 = fmul fast float %1104, %1243
  %1251 = fsub fast float %1249, %1250
  %1252 = fmul fast float %1104, %1241
  %1253 = fmul fast float %1106, %1239
  %1254 = fsub fast float %1252, %1253
  %1255 = fmul fast float %1248, %1245
  %1256 = fmul fast float %1251, %1245
  %1257 = fmul fast float %1254, %1245
  br label %1258

; <label>:1258                                    ; preds = %1225, %1168, %1149
  %1259 = phi float [ %1239, %1225 ], [ %1207, %1168 ], [ %1160, %1149 ]
  %1260 = phi float [ %1241, %1225 ], [ %1208, %1168 ], [ %1161, %1149 ]
  %1261 = phi float [ %1243, %1225 ], [ %1209, %1168 ], [ %1163, %1149 ]
  %1262 = phi float [ %1255, %1225 ], [ %1222, %1168 ], [ %1156, %1149 ]
  %1263 = phi float [ %1256, %1225 ], [ %1223, %1168 ], [ %1166, %1149 ]
  %1264 = phi float [ %1257, %1225 ], [ %1224, %1168 ], [ %1167, %1149 ]
  %1265 = phi float [ %1104, %1225 ], [ %1111, %1168 ], [ %1111, %1149 ]
  %1266 = phi float [ %1106, %1225 ], [ %1112, %1168 ], [ %1112, %1149 ]
  %1267 = phi float [ %1108, %1225 ], [ %1113, %1168 ], [ %1113, %1149 ]
  %1268 = fmul fast float %212, %224
  %1269 = fmul fast float %213, %224
  %1270 = fmul fast float %214, %224
  %1271 = fmul fast float %215, %225
  %1272 = fmul fast float %216, %225
  %1273 = fmul fast float %217, %225
  %1274 = fmul fast float %226, %218
  %1275 = fmul fast float %226, %219
  %1276 = fmul fast float %226, %220
  %1277 = fmul fast float %1259, %1268
  %1278 = call float @dx.op.tertiary.f32(i32 46, float %1260, float %1271, float %1277)  ; FMad(a,b,c)
  %1279 = call float @dx.op.tertiary.f32(i32 46, float %1261, float %1274, float %1278)  ; FMad(a,b,c)
  %1280 = fmul fast float %1259, %1269
  %1281 = call float @dx.op.tertiary.f32(i32 46, float %1260, float %1272, float %1280)  ; FMad(a,b,c)
  %1282 = call float @dx.op.tertiary.f32(i32 46, float %1261, float %1275, float %1281)  ; FMad(a,b,c)
  %1283 = fmul fast float %1259, %1270
  %1284 = call float @dx.op.tertiary.f32(i32 46, float %1260, float %1273, float %1283)  ; FMad(a,b,c)
  %1285 = call float @dx.op.tertiary.f32(i32 46, float %1261, float %1276, float %1284)  ; FMad(a,b,c)
  %1286 = fmul fast float %1262, %1268
  %1287 = call float @dx.op.tertiary.f32(i32 46, float %1263, float %1271, float %1286)  ; FMad(a,b,c)
  %1288 = call float @dx.op.tertiary.f32(i32 46, float %1264, float %1274, float %1287)  ; FMad(a,b,c)
  %1289 = fmul fast float %1262, %1269
  %1290 = call float @dx.op.tertiary.f32(i32 46, float %1263, float %1272, float %1289)  ; FMad(a,b,c)
  %1291 = call float @dx.op.tertiary.f32(i32 46, float %1264, float %1275, float %1290)  ; FMad(a,b,c)
  %1292 = fmul fast float %1262, %1270
  %1293 = call float @dx.op.tertiary.f32(i32 46, float %1263, float %1273, float %1292)  ; FMad(a,b,c)
  %1294 = call float @dx.op.tertiary.f32(i32 46, float %1264, float %1276, float %1293)  ; FMad(a,b,c)
  %1295 = fmul fast float %1265, %1268
  %1296 = call float @dx.op.tertiary.f32(i32 46, float %1266, float %1271, float %1295)  ; FMad(a,b,c)
  %1297 = call float @dx.op.tertiary.f32(i32 46, float %1267, float %1274, float %1296)  ; FMad(a,b,c)
  %1298 = fmul fast float %1265, %1269
  %1299 = call float @dx.op.tertiary.f32(i32 46, float %1266, float %1272, float %1298)  ; FMad(a,b,c)
  %1300 = call float @dx.op.tertiary.f32(i32 46, float %1267, float %1275, float %1299)  ; FMad(a,b,c)
  %1301 = fmul fast float %1265, %1270
  %1302 = call float @dx.op.tertiary.f32(i32 46, float %1266, float %1273, float %1301)  ; FMad(a,b,c)
  %1303 = call float @dx.op.tertiary.f32(i32 46, float %1267, float %1276, float %1302)  ; FMad(a,b,c)
  br label %1304

; <label>:1304                                    ; preds = %1258, %1114
  %1305 = phi float [ %1279, %1258 ], [ 0.000000e+00, %1114 ]
  %1306 = phi float [ %1282, %1258 ], [ 0.000000e+00, %1114 ]
  %1307 = phi float [ %1285, %1258 ], [ 0.000000e+00, %1114 ]
  %1308 = phi float [ %1288, %1258 ], [ 0.000000e+00, %1114 ]
  %1309 = phi float [ %1291, %1258 ], [ 0.000000e+00, %1114 ]
  %1310 = phi float [ %1294, %1258 ], [ 0.000000e+00, %1114 ]
  %1311 = phi float [ %1297, %1258 ], [ %1120, %1114 ]
  %1312 = phi float [ %1300, %1258 ], [ %1123, %1114 ]
  %1313 = phi float [ %1303, %1258 ], [ %1126, %1114 ]
  %1314 = fsub fast float %944, %945
  %1315 = fsub fast float %947, %948
  %1316 = fsub fast float %943, %945
  %1317 = fsub fast float %946, %948
  %1318 = fmul fast float %1067, %1314
  %1319 = fmul fast float %1067, %1315
  %1320 = fmul fast float %1068, %1316
  %1321 = fmul fast float %1068, %1317
  %1322 = fadd fast float %1320, %945
  %1323 = fadd fast float %1322, %1318
  %1324 = fadd fast float %1321, %948
  %1325 = fadd fast float %1324, %1319
  %1326 = fmul fast float %1082, %1314
  %1327 = fmul fast float %1082, %1315
  %1328 = fmul fast float %1083, %1316
  %1329 = fmul fast float %1083, %1317
  %1330 = fadd fast float %1326, %1328
  %1331 = fadd fast float %1327, %1329
  %1332 = fmul fast float %1092, %1314
  %1333 = fmul fast float %1092, %1315
  %1334 = fmul fast float %1093, %1316
  %1335 = fmul fast float %1093, %1317
  %1336 = fadd fast float %1332, %1334
  %1337 = fadd fast float %1333, %1335
  %1338 = fmul fast float %1066, %952
  %1339 = fmul fast float %1066, %956
  %1340 = fmul fast float %1066, %960
  %1341 = fmul fast float %1067, %976
  %1342 = fmul fast float %1067, %980
  %1343 = fmul fast float %1067, %984
  %1344 = fmul fast float %1068, %1000
  %1345 = fmul fast float %1068, %1004
  %1346 = fmul fast float %1068, %1008
  %1347 = fadd fast float %1341, %1344
  %1348 = fadd fast float %1347, %1338
  %1349 = fadd fast float %1342, %1345
  %1350 = fadd fast float %1349, %1339
  %1351 = fadd fast float %1343, %1346
  %1352 = fadd fast float %1351, %1340
  br label %1353

; <label>:1353                                    ; preds = %1304, %0
  %1354 = phi float [ %1305, %1304 ], [ 1.000000e+00, %0 ]
  %1355 = phi float [ %1306, %1304 ], [ 0.000000e+00, %0 ]
  %1356 = phi float [ %1307, %1304 ], [ 0.000000e+00, %0 ]
  %1357 = phi float [ %1308, %1304 ], [ 0.000000e+00, %0 ]
  %1358 = phi float [ %1309, %1304 ], [ 1.000000e+00, %0 ]
  %1359 = phi float [ %1310, %1304 ], [ 0.000000e+00, %0 ]
  %1360 = phi float [ %1311, %1304 ], [ 0.000000e+00, %0 ]
  %1361 = phi float [ %1312, %1304 ], [ 0.000000e+00, %0 ]
  %1362 = phi float [ %1313, %1304 ], [ 1.000000e+00, %0 ]
  %1363 = phi float [ %1348, %1304 ], [ 0.000000e+00, %0 ]
  %1364 = phi float [ %1350, %1304 ], [ 0.000000e+00, %0 ]
  %1365 = phi float [ %1352, %1304 ], [ 0.000000e+00, %0 ]
  %1366 = phi i32 [ %113, %1304 ], [ 0, %0 ]
  %1367 = phi float [ %1325, %1304 ], [ 0.000000e+00, %0 ]
  %1368 = phi float [ %1323, %1304 ], [ 0.000000e+00, %0 ]
  %1369 = phi float [ %1331, %1304 ], [ 0.000000e+00, %0 ]
  %1370 = phi float [ %1330, %1304 ], [ 0.000000e+00, %0 ]
  %1371 = phi float [ %1337, %1304 ], [ 0.000000e+00, %0 ]
  %1372 = phi float [ %1336, %1304 ], [ 0.000000e+00, %0 ]
  %1373 = fsub fast float %1363, %46
  %1374 = fsub fast float %1364, %47
  %1375 = fsub fast float %1365, %48
  %1376 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 140)  ; CBufferLoadLegacy(handle,regIndex)
  %1377 = extractvalue %dx.types.CBufRet.f32 %1376, 0
  %1378 = call float @dx.op.unary.f32(i32 21, float %1377)  ; Exp(value)
  %1379 = fmul fast float %1378, %1372
  %1380 = fmul fast float %1378, %1371
  %1381 = fmul fast float %1378, %1370
  %1382 = fmul fast float %1378, %1369
  %1383 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1384 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1385 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %1383, %dx.types.Handle %1384, float %1368, float %1367, float undef, float undef, i32 0, i32 0, i32 undef, float %1381, float %1382, float undef, float %1379, float %1380, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %1386 = extractvalue %dx.types.ResRet.f32 %1385, 0
  %1387 = extractvalue %dx.types.ResRet.f32 %1385, 1
  %1388 = fmul fast float %1386, 2.000000e+00
  %1389 = fmul fast float %1387, 2.000000e+00
  %1390 = fadd fast float %1388, -1.000000e+00
  %1391 = fadd fast float %1389, -1.000000e+00
  %1392 = call float @dx.op.dot2.f32(i32 54, float %1390, float %1391, float %1390, float %1391)  ; Dot2(ax,ay,bx,by)
  %1393 = fsub fast float 1.000000e+00, %1392
  %1394 = call float @dx.op.unary.f32(i32 7, float %1393)  ; Saturate(value)
  %1395 = call float @dx.op.unary.f32(i32 24, float %1394)  ; Sqrt(value)
  %1396 = fmul fast float %1390, %53
  %1397 = fmul fast float %1391, %53
  %1398 = fmul fast float %1395, %53
  %1399 = fadd fast float %1396, %50
  %1400 = fadd fast float %1397, %51
  %1401 = fadd fast float %1398, %52
  %1402 = call float @dx.op.dot3.f32(i32 55, float %1399, float %1400, float %1401, float %1399, float %1400, float %1401)  ; Dot3(ax,ay,az,bx,by,bz)
  %1403 = call float @dx.op.unary.f32(i32 25, float %1402)  ; Rsqrt(value)
  %1404 = fmul fast float %1399, %1403
  %1405 = fmul fast float %1400, %1403
  %1406 = fmul fast float %1401, %1403
  %1407 = fmul fast float %1404, %1354
  %1408 = call float @dx.op.tertiary.f32(i32 46, float %1405, float %1357, float %1407)  ; FMad(a,b,c)
  %1409 = call float @dx.op.tertiary.f32(i32 46, float %1406, float %1360, float %1408)  ; FMad(a,b,c)
  %1410 = fmul fast float %1404, %1355
  %1411 = call float @dx.op.tertiary.f32(i32 46, float %1405, float %1358, float %1410)  ; FMad(a,b,c)
  %1412 = call float @dx.op.tertiary.f32(i32 46, float %1406, float %1361, float %1411)  ; FMad(a,b,c)
  %1413 = fmul fast float %1404, %1356
  %1414 = call float @dx.op.tertiary.f32(i32 46, float %1405, float %1359, float %1413)  ; FMad(a,b,c)
  %1415 = call float @dx.op.tertiary.f32(i32 46, float %1406, float %1362, float %1414)  ; FMad(a,b,c)
  %1416 = call float @dx.op.dot3.f32(i32 55, float %1409, float %1412, float %1415, float %1409, float %1412, float %1415)  ; Dot3(ax,ay,az,bx,by,bz)
  %1417 = call float @dx.op.unary.f32(i32 25, float %1416)  ; Rsqrt(value)
  %1418 = fmul fast float %1417, %1409
  %1419 = fmul fast float %1417, %1412
  %1420 = fmul fast float %1417, %1415
  %1421 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %31, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %1422 = extractvalue %dx.types.CBufRet.f32 %1421, 0
  %1423 = extractvalue %dx.types.CBufRet.f32 %1421, 1
  %1424 = extractvalue %dx.types.CBufRet.f32 %1421, 2
  %1425 = extractvalue %dx.types.CBufRet.f32 %1421, 3
  %1426 = fmul fast float %1423, %1422
  %1427 = fmul fast float %1424, %1422
  %1428 = fmul fast float %1425, %1422
  %1429 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1430 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1431 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %1429, %dx.types.Handle %1430, float %1368, float %1367, float undef, float undef, i32 0, i32 0, i32 undef, float %1381, float %1382, float undef, float %1379, float %1380, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %1432 = extractvalue %dx.types.ResRet.f32 %1431, 0
  %1433 = extractvalue %dx.types.ResRet.f32 %1431, 1
  %1434 = extractvalue %dx.types.ResRet.f32 %1431, 2
  %1435 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %31, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %1436 = extractvalue %dx.types.CBufRet.f32 %1435, 0
  %1437 = extractvalue %dx.types.CBufRet.f32 %1435, 1
  %1438 = extractvalue %dx.types.CBufRet.f32 %1435, 2
  %1439 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %31, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %1440 = extractvalue %dx.types.CBufRet.f32 %1439, 0
  %1441 = extractvalue %dx.types.CBufRet.f32 %1439, 1
  %1442 = extractvalue %dx.types.CBufRet.f32 %1439, 2
  %1443 = fsub fast float %1436, %1440
  %1444 = fsub fast float %1437, %1441
  %1445 = fsub fast float %1438, %1442
  %1446 = fmul fast float %1443, %1434
  %1447 = fmul fast float %1444, %1434
  %1448 = fmul fast float %1445, %1434
  %1449 = fadd fast float %1446, %1440
  %1450 = fadd fast float %1447, %1441
  %1451 = fadd fast float %1448, %1442
  %1452 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %31, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %1453 = extractvalue %dx.types.CBufRet.f32 %1452, 0
  %1454 = extractvalue %dx.types.CBufRet.f32 %1452, 1
  %1455 = extractvalue %dx.types.CBufRet.f32 %1452, 2
  %1456 = fsub fast float %1453, %1449
  %1457 = fsub fast float %1454, %1450
  %1458 = fsub fast float %1455, %1451
  %1459 = fmul fast float %1456, %1433
  %1460 = fmul fast float %1457, %1433
  %1461 = fmul fast float %1458, %1433
  %1462 = fadd fast float %1459, %1449
  %1463 = fadd fast float %1460, %1450
  %1464 = fadd fast float %1461, %1451
  %1465 = fmul fast float %1462, %1432
  %1466 = fmul fast float %1463, %1432
  %1467 = fmul fast float %1464, %1432
  %1468 = extractvalue %dx.types.CBufRet.f32 %1452, 3
  %1469 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %31, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %1470 = extractvalue %dx.types.CBufRet.f32 %1469, 0
  %1471 = fsub fast float %1468, %1470
  %1472 = fmul fast float %1471, %1434
  %1473 = fadd fast float %1472, %1470
  %1474 = extractvalue %dx.types.CBufRet.f32 %1469, 1
  %1475 = fsub fast float %1474, %1473
  %1476 = fmul fast float %1475, %1433
  %1477 = fadd fast float %1476, %1473
  %1478 = call float @dx.op.unary.f32(i32 7, float %1465)  ; Saturate(value)
  %1479 = call float @dx.op.unary.f32(i32 7, float %1466)  ; Saturate(value)
  %1480 = call float @dx.op.unary.f32(i32 7, float %1467)  ; Saturate(value)
  %1481 = call float @dx.op.unary.f32(i32 7, float %1433)  ; Saturate(value)
  %1482 = call float @dx.op.unary.f32(i32 7, float %1477)  ; Saturate(value)
  %1483 = fmul fast float %1482, %56
  %1484 = fadd fast float %1483, %55
  %1485 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1486 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1485, i32 %1366, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1487 = extractvalue %dx.types.ResRet.f32 %1486, 0
  %1488 = bitcast float %1487 to i32
  %1489 = and i32 %1488, 8
  %1490 = icmp ne i32 %1489, 0
  %1491 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 192)  ; CBufferLoadLegacy(handle,regIndex)
  %1492 = extractvalue %dx.types.CBufRet.f32 %1491, 3
  %1493 = fcmp fast ogt float %1492, 0.000000e+00
  %1494 = and i1 %1493, %1490
  br i1 %1494, label %1495, label %1549, !dx.controlflow.hints !67

; <label>:1495                                    ; preds = %1353
  %1496 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 128)  ; CBufferLoadLegacy(handle,regIndex)
  %1497 = extractvalue %dx.types.CBufRet.f32 %1496, 2
  %1498 = extractvalue %dx.types.CBufRet.f32 %1496, 3
  %1499 = fmul fast float %1497, %35
  %1500 = fmul fast float %1498, %36
  %1501 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1502 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1503 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1501, %dx.types.Handle %1502, float %1499, float %1500, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1504 = extractvalue %dx.types.ResRet.f32 %1503, 0
  %1505 = extractvalue %dx.types.ResRet.f32 %1503, 1
  %1506 = extractvalue %dx.types.ResRet.f32 %1503, 2
  %1507 = extractvalue %dx.types.ResRet.f32 %1503, 3
  %1508 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1509 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1508, %dx.types.Handle %1502, float %1499, float %1500, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1510 = extractvalue %dx.types.ResRet.f32 %1509, 0
  %1511 = extractvalue %dx.types.ResRet.f32 %1509, 1
  %1512 = extractvalue %dx.types.ResRet.f32 %1509, 2
  %1513 = extractvalue %dx.types.ResRet.f32 %1509, 3
  %1514 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1515 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1514, %dx.types.Handle %1502, float %1499, float %1500, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1516 = extractvalue %dx.types.ResRet.f32 %1515, 0
  %1517 = extractvalue %dx.types.ResRet.f32 %1515, 1
  %1518 = extractvalue %dx.types.ResRet.f32 %1515, 2
  %1519 = extractvalue %dx.types.ResRet.f32 %1515, 3
  %1520 = fmul fast float %1510, 2.000000e+00
  %1521 = fmul fast float %1511, 2.000000e+00
  %1522 = fmul fast float %1512, 2.000000e+00
  %1523 = fadd fast float %1520, 0xBFF0101020000000
  %1524 = fadd fast float %1521, 0xBFF0101020000000
  %1525 = fadd fast float %1522, 0xBFF0101020000000
  %1526 = fmul fast float %1507, %1478
  %1527 = fmul fast float %1507, %1479
  %1528 = fmul fast float %1507, %1480
  %1529 = fadd fast float %1526, %1504
  %1530 = fadd fast float %1527, %1505
  %1531 = fadd fast float %1528, %1506
  %1532 = fmul fast float %1513, %1418
  %1533 = fmul fast float %1513, %1419
  %1534 = fmul fast float %1513, %1420
  %1535 = fadd fast float %1523, %1532
  %1536 = fadd fast float %1524, %1533
  %1537 = fadd fast float %1525, %1534
  %1538 = call float @dx.op.dot3.f32(i32 55, float %1535, float %1536, float %1537, float %1535, float %1536, float %1537)  ; Dot3(ax,ay,az,bx,by,bz)
  %1539 = call float @dx.op.unary.f32(i32 25, float %1538)  ; Rsqrt(value)
  %1540 = fmul fast float %1539, %1535
  %1541 = fmul fast float %1539, %1536
  %1542 = fmul fast float %1539, %1537
  %1543 = fmul fast float %1519, %1484
  %1544 = fadd fast float %1543, %1518
  %1545 = fmul fast float %1519, %1481
  %1546 = fadd fast float %1545, %1516
  %1547 = fmul fast float %1519, 5.000000e-01
  %1548 = fadd fast float %1547, %1517
  br label %1549

; <label>:1549                                    ; preds = %1495, %1353
  %1550 = phi float [ %1540, %1495 ], [ %1418, %1353 ]
  %1551 = phi float [ %1541, %1495 ], [ %1419, %1353 ]
  %1552 = phi float [ %1542, %1495 ], [ %1420, %1353 ]
  %1553 = phi float [ %1529, %1495 ], [ %1478, %1353 ]
  %1554 = phi float [ %1530, %1495 ], [ %1479, %1353 ]
  %1555 = phi float [ %1531, %1495 ], [ %1480, %1353 ]
  %1556 = phi float [ %1546, %1495 ], [ %1481, %1353 ]
  %1557 = phi float [ %1548, %1495 ], [ 5.000000e-01, %1353 ]
  %1558 = phi float [ %1544, %1495 ], [ %1484, %1353 ]
  %1559 = fmul fast float %42, 2.097152e+06
  %1560 = fmul fast float %43, 2.097152e+06
  %1561 = fmul fast float %44, 2.097152e+06
  %1562 = fadd fast float %1373, %1559
  %1563 = fadd fast float %1374, %1560
  %1564 = fadd fast float %1375, %1561
  %1565 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 231)  ; CBufferLoadLegacy(handle,regIndex)
  %1566 = extractvalue %dx.types.CBufRet.f32 %1565, 0
  %1567 = extractvalue %dx.types.CBufRet.f32 %1565, 1
  %1568 = extractvalue %dx.types.CBufRet.f32 %1565, 2
  %1569 = fmul fast float %1566, %1562
  %1570 = fmul fast float %1567, %1563
  %1571 = fmul fast float %1568, %1564
  %1572 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 232)  ; CBufferLoadLegacy(handle,regIndex)
  %1573 = extractvalue %dx.types.CBufRet.f32 %1572, 0
  %1574 = extractvalue %dx.types.CBufRet.f32 %1572, 1
  %1575 = extractvalue %dx.types.CBufRet.f32 %1572, 2
  %1576 = fadd fast float %1569, %1573
  %1577 = fadd fast float %1570, %1574
  %1578 = fadd fast float %1571, %1575
  %1579 = call float @dx.op.binary.f32(i32 35, float %1576, float 0.000000e+00)  ; FMax(a,b)
  %1580 = call float @dx.op.binary.f32(i32 35, float %1577, float 0.000000e+00)  ; FMax(a,b)
  %1581 = call float @dx.op.binary.f32(i32 35, float %1578, float 0.000000e+00)  ; FMax(a,b)
  %1582 = call float @dx.op.binary.f32(i32 36, float %1579, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1583 = call float @dx.op.binary.f32(i32 36, float %1580, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1584 = call float @dx.op.binary.f32(i32 36, float %1581, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1585 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 233)  ; CBufferLoadLegacy(handle,regIndex)
  %1586 = extractvalue %dx.types.CBufRet.f32 %1585, 0
  %1587 = extractvalue %dx.types.CBufRet.f32 %1585, 1
  %1588 = extractvalue %dx.types.CBufRet.f32 %1585, 2
  %1589 = fmul fast float %1586, %1582
  %1590 = fmul fast float %1587, %1583
  %1591 = fmul fast float %1588, %1584
  %1592 = fptosi float %1589 to i32
  %1593 = fptosi float %1590 to i32
  %1594 = fptosi float %1591 to i32
  %1595 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 4, i32 1029 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xU32>
  %1596 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1595, i32 0, i32 %1592, i32 %1593, i32 %1594, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1597 = extractvalue %dx.types.ResRet.i32 %1596, 0
  %1598 = extractvalue %dx.types.ResRet.i32 %1596, 1
  %1599 = extractvalue %dx.types.ResRet.i32 %1596, 2
  %1600 = extractvalue %dx.types.ResRet.i32 %1596, 3
  %1601 = uitofp i32 %1597 to float
  %1602 = uitofp i32 %1598 to float
  %1603 = uitofp i32 %1599 to float
  %1604 = uitofp i32 %1600 to float
  %1605 = extractvalue %dx.types.CBufRet.f32 %1585, 3
  %1606 = fadd fast float %1605, 1.000000e+00
  %1607 = fmul fast float %1606, %1601
  %1608 = fmul fast float %1606, %1602
  %1609 = fmul fast float %1606, %1603
  %1610 = fdiv fast float %1589, %1604
  %1611 = fdiv fast float %1590, %1604
  %1612 = fdiv fast float %1591, %1604
  %1613 = call float @dx.op.unary.f32(i32 22, float %1610)  ; Frc(value)
  %1614 = call float @dx.op.unary.f32(i32 22, float %1611)  ; Frc(value)
  %1615 = call float @dx.op.unary.f32(i32 22, float %1612)  ; Frc(value)
  %1616 = fmul fast float %1605, %1613
  %1617 = fmul fast float %1605, %1614
  %1618 = fmul fast float %1605, %1615
  %1619 = fadd fast float %1607, 5.000000e-01
  %1620 = fadd fast float %1619, %1616
  %1621 = fadd fast float %1608, 5.000000e-01
  %1622 = fadd fast float %1621, %1617
  %1623 = fadd fast float %1609, 5.000000e-01
  %1624 = fadd fast float %1623, %1618
  %1625 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 234)  ; CBufferLoadLegacy(handle,regIndex)
  %1626 = extractvalue %dx.types.CBufRet.f32 %1625, 0
  %1627 = extractvalue %dx.types.CBufRet.f32 %1625, 1
  %1628 = extractvalue %dx.types.CBufRet.f32 %1625, 2
  %1629 = fmul fast float %1620, %1626
  %1630 = fmul fast float %1622, %1627
  %1631 = fmul fast float %1624, %1628
  %1632 = and i32 %1488, 256
  %1633 = icmp ne i32 %1632, 0
  %1634 = and i32 %1488, 512
  %1635 = icmp ne i32 %1634, 0
  %1636 = select i1 %1635, float 1.000000e+00, float 0.000000e+00
  %1637 = select i1 %1633, float 2.000000e+00, float 0.000000e+00
  %1638 = fadd fast float %1637, %1636
  %1639 = fmul fast float %1638, 0x3FD5555560000000
  %1640 = and i32 %1488, 4
  %1641 = icmp eq i32 %1640, 0
  br i1 %1641, label %1647, label %1642, !dx.controlflow.hints !68

; <label>:1642                                    ; preds = %1549
  %1643 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1644 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1645 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1643, %dx.types.Handle %1644, float %1629, float %1630, float %1631, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1646 = extractvalue %dx.types.ResRet.f32 %1645, 0
  br label %1647

; <label>:1647                                    ; preds = %1642, %1549
  %1648 = phi float [ %1646, %1642 ], [ 1.000000e+00, %1549 ]
  %1649 = fmul fast float %1557, 0x3FB47AE140000000
  %1650 = fsub fast float %1553, %1649
  %1651 = fsub fast float %1554, %1649
  %1652 = fsub fast float %1555, %1649
  %1653 = fmul fast float %1650, %1556
  %1654 = fmul fast float %1651, %1556
  %1655 = fmul fast float %1652, %1556
  %1656 = fadd fast float %1653, %1649
  %1657 = fadd fast float %1654, %1649
  %1658 = fadd fast float %1655, %1649
  %1659 = fmul fast float %1556, %1553
  %1660 = fmul fast float %1556, %1554
  %1661 = fmul fast float %1556, %1555
  %1662 = fsub fast float %1553, %1659
  %1663 = fsub fast float %1554, %1660
  %1664 = fsub fast float %1555, %1661
  %1665 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 133)  ; CBufferLoadLegacy(handle,regIndex)
  %1666 = extractvalue %dx.types.CBufRet.f32 %1665, 3
  %1667 = fmul fast float %1666, %1662
  %1668 = fmul fast float %1666, %1663
  %1669 = fmul fast float %1666, %1664
  %1670 = extractvalue %dx.types.CBufRet.f32 %1665, 0
  %1671 = extractvalue %dx.types.CBufRet.f32 %1665, 1
  %1672 = extractvalue %dx.types.CBufRet.f32 %1665, 2
  %1673 = fadd fast float %1667, %1670
  %1674 = fadd fast float %1668, %1671
  %1675 = fadd fast float %1669, %1672
  %1676 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 134)  ; CBufferLoadLegacy(handle,regIndex)
  %1677 = extractvalue %dx.types.CBufRet.f32 %1676, 3
  %1678 = fmul fast float %1677, %1656
  %1679 = fmul fast float %1677, %1657
  %1680 = fmul fast float %1677, %1658
  %1681 = extractvalue %dx.types.CBufRet.f32 %1676, 0
  %1682 = extractvalue %dx.types.CBufRet.f32 %1676, 1
  %1683 = extractvalue %dx.types.CBufRet.f32 %1676, 2
  %1684 = fadd fast float %1678, %1681
  %1685 = fadd fast float %1679, %1682
  %1686 = fadd fast float %1680, %1683
  %1687 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 179)  ; CBufferLoadLegacy(handle,regIndex)
  %1688 = extractvalue %dx.types.CBufRet.f32 %1687, 3
  %1689 = fcmp fast une float %1688, 0.000000e+00
  %1690 = fmul fast float %1684, 0x3FDCCCCCC0000000
  %1691 = fmul fast float %1685, 0x3FDCCCCCC0000000
  %1692 = fmul fast float %1686, 0x3FDCCCCCC0000000
  %1693 = fadd fast float %1690, %1673
  %1694 = fadd fast float %1691, %1674
  %1695 = fadd fast float %1692, %1675
  %1696 = select i1 %1689, float %1693, float %1673
  %1697 = select i1 %1689, float %1694, float %1674
  %1698 = select i1 %1689, float %1695, float %1675
  %1699 = select i1 %1689, float 0.000000e+00, float %1684
  %1700 = select i1 %1689, float 0.000000e+00, float %1685
  %1701 = select i1 %1689, float 0.000000e+00, float %1686
  %1702 = call float @dx.op.dot3.f32(i32 55, float %1699, float %1700, float %1701, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %1703 = fmul fast float %1702, 0x3F40600000000000
  %1704 = fadd fast float %1703, 0x3FEFFCB940000000
  %1705 = call float @dx.op.binary.f32(i32 35, float 1.000000e+00, float %1704)  ; FMax(a,b)
  %1706 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1707 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1708 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1706, %dx.types.Handle %1707, float %1629, float %1630, float %1631, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1709 = extractvalue %dx.types.ResRet.f32 %1708, 0
  %1710 = extractvalue %dx.types.ResRet.f32 %1708, 1
  %1711 = extractvalue %dx.types.ResRet.f32 %1708, 2
  %1712 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1713 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1712, %dx.types.Handle %1707, float %1629, float %1630, float %1631, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1714 = extractvalue %dx.types.ResRet.f32 %1713, 0
  %1715 = extractvalue %dx.types.ResRet.f32 %1713, 1
  %1716 = extractvalue %dx.types.ResRet.f32 %1713, 2
  %1717 = extractvalue %dx.types.ResRet.f32 %1713, 3
  %1718 = fmul fast float %1714, 2.000000e+00
  %1719 = fmul fast float %1715, 2.000000e+00
  %1720 = fmul fast float %1716, 2.000000e+00
  %1721 = fmul fast float %1717, 2.000000e+00
  %1722 = fadd fast float %1718, -1.000000e+00
  %1723 = fadd fast float %1719, -1.000000e+00
  %1724 = fadd fast float %1720, -1.000000e+00
  %1725 = fadd fast float %1721, -1.000000e+00
  %1726 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1727 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1726, %dx.types.Handle %1707, float %1629, float %1630, float %1631, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1728 = extractvalue %dx.types.ResRet.f32 %1727, 0
  %1729 = extractvalue %dx.types.ResRet.f32 %1727, 1
  %1730 = extractvalue %dx.types.ResRet.f32 %1727, 2
  %1731 = extractvalue %dx.types.ResRet.f32 %1727, 3
  %1732 = fmul fast float %1728, 2.000000e+00
  %1733 = fmul fast float %1729, 2.000000e+00
  %1734 = fmul fast float %1730, 2.000000e+00
  %1735 = fmul fast float %1731, 2.000000e+00
  %1736 = fadd fast float %1732, -1.000000e+00
  %1737 = fadd fast float %1733, -1.000000e+00
  %1738 = fadd fast float %1734, -1.000000e+00
  %1739 = fadd fast float %1735, -1.000000e+00
  %1740 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1741 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1740, %dx.types.Handle %1707, float %1629, float %1630, float %1631, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1742 = extractvalue %dx.types.ResRet.f32 %1741, 0
  %1743 = extractvalue %dx.types.ResRet.f32 %1741, 1
  %1744 = extractvalue %dx.types.ResRet.f32 %1741, 2
  %1745 = extractvalue %dx.types.ResRet.f32 %1741, 3
  %1746 = fmul fast float %1742, 2.000000e+00
  %1747 = fmul fast float %1743, 2.000000e+00
  %1748 = fmul fast float %1744, 2.000000e+00
  %1749 = fmul fast float %1745, 2.000000e+00
  %1750 = fadd fast float %1746, -1.000000e+00
  %1751 = fadd fast float %1747, -1.000000e+00
  %1752 = fadd fast float %1748, -1.000000e+00
  %1753 = fadd fast float %1749, -1.000000e+00
  %1754 = fmul fast float %1709, 0x3FFBB67B80000000
  %1755 = fmul fast float %1754, %1722
  %1756 = fmul fast float %1754, %1723
  %1757 = fmul fast float %1754, %1724
  %1758 = fmul fast float %1709, 0x400EFBDC80000000
  %1759 = fmul fast float %1758, %1725
  %1760 = fmul fast float %1710, 0x3FFBB67B80000000
  %1761 = fmul fast float %1760, %1736
  %1762 = fmul fast float %1760, %1737
  %1763 = fmul fast float %1760, %1738
  %1764 = fmul fast float %1710, 0x400EFBDC80000000
  %1765 = fmul fast float %1764, %1739
  %1766 = fmul fast float %1711, 0x3FFBB67B80000000
  %1767 = fmul fast float %1766, %1750
  %1768 = fmul fast float %1766, %1751
  %1769 = fmul fast float %1766, %1752
  %1770 = fmul fast float %1711, 0x400EFBDC80000000
  %1771 = fmul fast float %1770, %1753
  %1772 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1773 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1772, %dx.types.Handle %1707, float %1629, float %1630, float %1631, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1774 = extractvalue %dx.types.ResRet.f32 %1773, 0
  %1775 = extractvalue %dx.types.ResRet.f32 %1773, 1
  %1776 = extractvalue %dx.types.ResRet.f32 %1773, 2
  %1777 = extractvalue %dx.types.ResRet.f32 %1773, 3
  %1778 = fmul fast float %1774, 2.000000e+00
  %1779 = fmul fast float %1775, 2.000000e+00
  %1780 = fmul fast float %1776, 2.000000e+00
  %1781 = fmul fast float %1777, 2.000000e+00
  %1782 = fadd fast float %1778, -1.000000e+00
  %1783 = fadd fast float %1779, -1.000000e+00
  %1784 = fadd fast float %1780, -1.000000e+00
  %1785 = fadd fast float %1781, -1.000000e+00
  %1786 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1787 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1786, %dx.types.Handle %1707, float %1629, float %1630, float %1631, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1788 = extractvalue %dx.types.ResRet.f32 %1787, 0
  %1789 = extractvalue %dx.types.ResRet.f32 %1787, 1
  %1790 = extractvalue %dx.types.ResRet.f32 %1787, 2
  %1791 = extractvalue %dx.types.ResRet.f32 %1787, 3
  %1792 = fmul fast float %1788, 2.000000e+00
  %1793 = fmul fast float %1789, 2.000000e+00
  %1794 = fmul fast float %1790, 2.000000e+00
  %1795 = fmul fast float %1791, 2.000000e+00
  %1796 = fadd fast float %1792, -1.000000e+00
  %1797 = fadd fast float %1793, -1.000000e+00
  %1798 = fadd fast float %1794, -1.000000e+00
  %1799 = fadd fast float %1795, -1.000000e+00
  %1800 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1801 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1800, %dx.types.Handle %1707, float %1629, float %1630, float %1631, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1802 = extractvalue %dx.types.ResRet.f32 %1801, 0
  %1803 = extractvalue %dx.types.ResRet.f32 %1801, 1
  %1804 = extractvalue %dx.types.ResRet.f32 %1801, 2
  %1805 = extractvalue %dx.types.ResRet.f32 %1801, 3
  %1806 = fmul fast float %1802, 2.000000e+00
  %1807 = fmul fast float %1803, 2.000000e+00
  %1808 = fmul fast float %1804, 2.000000e+00
  %1809 = fmul fast float %1805, 2.000000e+00
  %1810 = fadd fast float %1806, -1.000000e+00
  %1811 = fadd fast float %1807, -1.000000e+00
  %1812 = fadd fast float %1808, -1.000000e+00
  %1813 = fadd fast float %1809, -1.000000e+00
  %1814 = fmul fast float %1758, %1782
  %1815 = fmul fast float %1709, 0x4011E37860000000
  %1816 = fmul fast float %1815, %1783
  %1817 = fmul fast float %1758, %1784
  %1818 = fmul fast float %1764, %1796
  %1819 = fmul fast float %1710, 0x4011E37860000000
  %1820 = fmul fast float %1819, %1797
  %1821 = fmul fast float %1764, %1798
  %1822 = fmul fast float %1770, %1810
  %1823 = fmul fast float %1711, 0x4011E37860000000
  %1824 = fmul fast float %1823, %1811
  %1825 = fmul fast float %1770, %1812
  %1826 = fmul fast float %1550, %1550
  %1827 = fmul fast float %1551, %1551
  %1828 = fsub fast float %1826, %1827
  %1829 = fmul fast float %1551, 0xBFF05F8CE0000000
  %1830 = fmul fast float %1552, 0x3FF05F8CE0000000
  %1831 = fmul fast float %1550, 0xBFF05F8CE0000000
  %1832 = fmul fast float %1550, 0x3FEB756F20000000
  %1833 = fmul fast float %1832, %1551
  %1834 = fmul fast float %1551, 0xBFEB756F20000000
  %1835 = fmul fast float %1834, %1552
  %1836 = fmul fast float %1552, %1552
  %1837 = fmul fast float %1836, 0x3FE7C7ADC0000000
  %1838 = fadd fast float %1837, 0xBFCFB4E7C0000000
  %1839 = fmul fast float %1550, 0xBFEB756F20000000
  %1840 = fmul fast float %1839, %1552
  %1841 = call float @dx.op.dot4.f32(i32 56, float %1709, float %1755, float %1756, float %1757, float 0x3FEC5BF9E0000000, float %1829, float %1830, float %1831)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1842 = call float @dx.op.dot4.f32(i32 56, float %1759, float %1814, float %1816, float %1817, float %1833, float %1835, float %1838, float %1840)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1843 = fmul fast float %1828, 0x3FFA963680000000
  %1844 = fmul fast float %1843, %1709
  %1845 = fmul fast float %1844, %1785
  %1846 = fadd fast float %1841, %1845
  %1847 = fadd fast float %1846, %1842
  %1848 = call float @dx.op.dot4.f32(i32 56, float %1710, float %1761, float %1762, float %1763, float 0x3FEC5BF9E0000000, float %1829, float %1830, float %1831)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1849 = call float @dx.op.dot4.f32(i32 56, float %1765, float %1818, float %1820, float %1821, float %1833, float %1835, float %1838, float %1840)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1850 = fmul fast float %1843, %1710
  %1851 = fmul fast float %1850, %1799
  %1852 = fadd fast float %1848, %1851
  %1853 = fadd fast float %1852, %1849
  %1854 = call float @dx.op.dot4.f32(i32 56, float %1711, float %1767, float %1768, float %1769, float 0x3FEC5BF9E0000000, float %1829, float %1830, float %1831)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1855 = call float @dx.op.dot4.f32(i32 56, float %1771, float %1822, float %1824, float %1825, float %1833, float %1835, float %1838, float %1840)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1856 = fadd fast float %1855, %1854
  %1857 = fmul fast float %1843, %1711
  %1858 = fmul fast float %1857, %1813
  %1859 = fadd fast float %1856, %1858
  %1860 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1847)  ; FMax(a,b)
  %1861 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1853)  ; FMax(a,b)
  %1862 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1859)  ; FMax(a,b)
  %1863 = fmul fast float %1860, 0x3FD45F3060000000
  %1864 = fmul fast float %1861, 0x3FD45F3060000000
  %1865 = fmul fast float %1862, 0x3FD45F3060000000
  %1866 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 155)  ; CBufferLoadLegacy(handle,regIndex)
  %1867 = extractvalue %dx.types.CBufRet.f32 %1866, 0
  %1868 = extractvalue %dx.types.CBufRet.f32 %1866, 1
  %1869 = extractvalue %dx.types.CBufRet.f32 %1866, 2
  %1870 = fmul fast float %1863, %1867
  %1871 = fmul fast float %1864, %1868
  %1872 = fmul fast float %1865, %1869
  %1873 = icmp eq i32 %40, 0
  br i1 %1873, label %1990, label %1874

; <label>:1874                                    ; preds = %1647
  %1875 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 182)  ; CBufferLoadLegacy(handle,regIndex)
  %1876 = extractvalue %dx.types.CBufRet.f32 %1875, 1
  %1877 = fcmp fast une float %1876, 0.000000e+00
  br i1 %1877, label %1878, label %1917, !dx.controlflow.hints !69

; <label>:1878                                    ; preds = %1874
  %1879 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1880 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1879, %dx.types.Handle %1707, float %1629, float %1630, float %1631, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1881 = extractvalue %dx.types.ResRet.f32 %1880, 0
  %1882 = extractvalue %dx.types.ResRet.f32 %1880, 1
  %1883 = extractvalue %dx.types.ResRet.f32 %1880, 2
  %1884 = fmul fast float %1881, 2.000000e+00
  %1885 = fmul fast float %1882, 2.000000e+00
  %1886 = fmul fast float %1883, 2.000000e+00
  %1887 = fadd fast float %1884, -1.000000e+00
  %1888 = fadd fast float %1885, -1.000000e+00
  %1889 = fadd fast float %1886, -1.000000e+00
  %1890 = fmul fast float %1887, %1887
  %1891 = fmul fast float %1888, %1888
  %1892 = fadd fast float %1890, %1891
  %1893 = fmul fast float %1889, %1889
  %1894 = fadd fast float %1892, %1893
  %1895 = call float @dx.op.unary.f32(i32 24, float %1894)  ; Sqrt(value)
  %1896 = call float @dx.op.binary.f32(i32 35, float %1895, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %1897 = fdiv fast float %1887, %1896
  %1898 = fdiv fast float %1888, %1896
  %1899 = fdiv fast float %1889, %1896
  %1900 = fsub fast float 1.000000e+00, %1895
  %1901 = fmul fast float %1900, %1900
  %1902 = fsub fast float 1.000000e+00, %1901
  %1903 = fsub fast float %1550, %1897
  %1904 = fsub fast float %1551, %1898
  %1905 = fsub fast float %1552, %1899
  %1906 = fmul fast float %1902, %1903
  %1907 = fmul fast float %1904, %1902
  %1908 = fmul fast float %1905, %1902
  %1909 = fadd fast float %1906, %1897
  %1910 = fadd fast float %1907, %1898
  %1911 = fadd fast float %1908, %1899
  %1912 = call float @dx.op.dot3.f32(i32 55, float %1897, float %1898, float %1899, float %1550, float %1551, float %1552)  ; Dot3(ax,ay,az,bx,by,bz)
  %1913 = call float @dx.op.unary.f32(i32 7, float %1912)  ; Saturate(value)
  %1914 = fsub fast float 1.000000e+00, %1913
  %1915 = fmul fast float %1914, %1902
  %1916 = fadd fast float %1915, %1913
  br label %1917

; <label>:1917                                    ; preds = %1878, %1874
  %1918 = phi float [ %1895, %1878 ], [ 1.000000e+00, %1874 ]
  %1919 = phi float [ %1916, %1878 ], [ 1.000000e+00, %1874 ]
  %1920 = phi float [ %1909, %1878 ], [ %1550, %1874 ]
  %1921 = phi float [ %1910, %1878 ], [ %1551, %1874 ]
  %1922 = phi float [ %1911, %1878 ], [ %1552, %1874 ]
  %1923 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1924 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1923, i32 0, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1925 = extractvalue %dx.types.ResRet.f32 %1924, 0
  %1926 = extractvalue %dx.types.ResRet.f32 %1924, 1
  %1927 = extractvalue %dx.types.ResRet.f32 %1924, 2
  %1928 = extractvalue %dx.types.ResRet.f32 %1924, 3
  %1929 = call float @dx.op.dot4.f32(i32 56, float %1925, float %1926, float %1927, float %1928, float %1920, float %1921, float %1922, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1930 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1923, i32 1, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1931 = extractvalue %dx.types.ResRet.f32 %1930, 0
  %1932 = extractvalue %dx.types.ResRet.f32 %1930, 1
  %1933 = extractvalue %dx.types.ResRet.f32 %1930, 2
  %1934 = extractvalue %dx.types.ResRet.f32 %1930, 3
  %1935 = call float @dx.op.dot4.f32(i32 56, float %1931, float %1932, float %1933, float %1934, float %1920, float %1921, float %1922, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1936 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1923, i32 2, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1937 = extractvalue %dx.types.ResRet.f32 %1936, 0
  %1938 = extractvalue %dx.types.ResRet.f32 %1936, 1
  %1939 = extractvalue %dx.types.ResRet.f32 %1936, 2
  %1940 = extractvalue %dx.types.ResRet.f32 %1936, 3
  %1941 = call float @dx.op.dot4.f32(i32 56, float %1937, float %1938, float %1939, float %1940, float %1920, float %1921, float %1922, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1942 = fmul fast float %1921, %1920
  %1943 = fmul fast float %1922, %1921
  %1944 = fmul fast float %1922, %1922
  %1945 = fmul fast float %1922, %1920
  %1946 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1923, i32 3, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1947 = extractvalue %dx.types.ResRet.f32 %1946, 0
  %1948 = extractvalue %dx.types.ResRet.f32 %1946, 1
  %1949 = extractvalue %dx.types.ResRet.f32 %1946, 2
  %1950 = extractvalue %dx.types.ResRet.f32 %1946, 3
  %1951 = call float @dx.op.dot4.f32(i32 56, float %1947, float %1948, float %1949, float %1950, float %1942, float %1943, float %1944, float %1945)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1952 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1923, i32 4, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1953 = extractvalue %dx.types.ResRet.f32 %1952, 0
  %1954 = extractvalue %dx.types.ResRet.f32 %1952, 1
  %1955 = extractvalue %dx.types.ResRet.f32 %1952, 2
  %1956 = extractvalue %dx.types.ResRet.f32 %1952, 3
  %1957 = call float @dx.op.dot4.f32(i32 56, float %1953, float %1954, float %1955, float %1956, float %1942, float %1943, float %1944, float %1945)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1958 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1923, i32 5, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1959 = extractvalue %dx.types.ResRet.f32 %1958, 0
  %1960 = extractvalue %dx.types.ResRet.f32 %1958, 1
  %1961 = extractvalue %dx.types.ResRet.f32 %1958, 2
  %1962 = extractvalue %dx.types.ResRet.f32 %1958, 3
  %1963 = call float @dx.op.dot4.f32(i32 56, float %1959, float %1960, float %1961, float %1962, float %1942, float %1943, float %1944, float %1945)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1964 = fmul fast float %1920, %1920
  %1965 = fmul fast float %1921, %1921
  %1966 = fsub fast float %1964, %1965
  %1967 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1923, i32 6, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1968 = extractvalue %dx.types.ResRet.f32 %1967, 0
  %1969 = extractvalue %dx.types.ResRet.f32 %1967, 1
  %1970 = extractvalue %dx.types.ResRet.f32 %1967, 2
  %1971 = fmul fast float %1968, %1966
  %1972 = fmul fast float %1969, %1966
  %1973 = fmul fast float %1970, %1966
  %1974 = fadd fast float %1951, %1929
  %1975 = fadd fast float %1957, %1935
  %1976 = fadd fast float %1963, %1941
  %1977 = fadd fast float %1974, %1971
  %1978 = fadd fast float %1975, %1972
  %1979 = fadd fast float %1976, %1973
  %1980 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1977)  ; FMax(a,b)
  %1981 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1978)  ; FMax(a,b)
  %1982 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1979)  ; FMax(a,b)
  %1983 = fmul fast float %1919, %1918
  %1984 = fmul fast float %1983, %58
  %1985 = fmul fast float %1984, %1980
  %1986 = fmul fast float %1983, %59
  %1987 = fmul fast float %1986, %1981
  %1988 = fmul fast float %1983, %60
  %1989 = fmul fast float %1988, %1982
  br label %1990

; <label>:1990                                    ; preds = %1917, %1647
  %1991 = phi float [ %1985, %1917 ], [ 0.000000e+00, %1647 ]
  %1992 = phi float [ %1987, %1917 ], [ 0.000000e+00, %1647 ]
  %1993 = phi float [ %1989, %1917 ], [ 0.000000e+00, %1647 ]
  %1994 = fadd fast float %1991, %1870
  %1995 = fadd fast float %1992, %1871
  %1996 = fadd fast float %1993, %1872
  %1997 = call float @dx.op.dot3.f32(i32 55, float %1994, float %1995, float %1996, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %1998 = fmul fast float %1994, %1696
  %1999 = fmul fast float %1995, %1697
  %2000 = fmul fast float %1996, %1698
  %2001 = fmul fast float %1553, 0x3F40600000000000
  %2002 = fadd fast float %2001, 0x3FEFFCB940000000
  %2003 = fmul fast float %1554, 0x3F40600000000000
  %2004 = fadd fast float %2003, 0x3FEFFCB940000000
  %2005 = fmul fast float %1555, 0x3F40600000000000
  %2006 = fadd fast float %2005, 0x3FEFFCB940000000
  %2007 = call float @dx.op.binary.f32(i32 35, float 1.000000e+00, float %2002)  ; FMax(a,b)
  %2008 = call float @dx.op.binary.f32(i32 35, float 1.000000e+00, float %2004)  ; FMax(a,b)
  %2009 = call float @dx.op.binary.f32(i32 35, float 1.000000e+00, float %2006)  ; FMax(a,b)
  %2010 = fmul fast float %1998, %2007
  %2011 = fmul fast float %1999, %2008
  %2012 = fmul fast float %2000, %2009
  %2013 = fmul fast float %1699, 0x3FDCCCCCC0000000
  %2014 = fmul fast float %1700, 0x3FDCCCCCC0000000
  %2015 = fmul fast float %1701, 0x3FDCCCCCC0000000
  %2016 = fadd fast float %1696, %2013
  %2017 = fadd fast float %1697, %2014
  %2018 = fadd fast float %1698, %2015
  %2019 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 142)  ; CBufferLoadLegacy(handle,regIndex)
  %2020 = extractvalue %dx.types.CBufRet.f32 %2019, 2
  %2021 = fmul fast float %2020, %2016
  %2022 = fmul fast float %2020, %2017
  %2023 = fmul fast float %2020, %2018
  %2024 = call float @dx.op.binary.f32(i32 35, float %1426, float 0.000000e+00)  ; FMax(a,b)
  %2025 = call float @dx.op.binary.f32(i32 35, float %1427, float 0.000000e+00)  ; FMax(a,b)
  %2026 = call float @dx.op.binary.f32(i32 35, float %1428, float 0.000000e+00)  ; FMax(a,b)
  %2027 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 137)  ; CBufferLoadLegacy(handle,regIndex)
  %2028 = extractvalue %dx.types.CBufRet.f32 %2027, 0
  %2029 = fcmp fast ogt float %2028, 0.000000e+00
  br i1 %2029, label %2030, label %2097, !dx.controlflow.hints !70

; <label>:2030                                    ; preds = %1990
  %2031 = add nsw i32 %1366, 1
  %2032 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1485, i32 %2031, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2033 = extractvalue %dx.types.ResRet.f32 %2032, 0
  %2034 = extractvalue %dx.types.ResRet.f32 %2032, 1
  %2035 = extractvalue %dx.types.ResRet.f32 %2032, 2
  %2036 = add nsw i32 %1366, 18
  %2037 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1485, i32 %2036, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2038 = extractvalue %dx.types.ResRet.f32 %2037, 0
  %2039 = extractvalue %dx.types.ResRet.f32 %2037, 1
  %2040 = extractvalue %dx.types.ResRet.f32 %2037, 2
  %2041 = add nsw i32 %1366, 17
  %2042 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1485, i32 %2041, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2043 = extractvalue %dx.types.ResRet.f32 %2042, 3
  %2044 = add nsw i32 %1366, 24
  %2045 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1485, i32 %2044, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2046 = extractvalue %dx.types.ResRet.f32 %2045, 3
  %2047 = add nsw i32 %1366, 25
  %2048 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1485, i32 %2047, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2049 = extractvalue %dx.types.ResRet.f32 %2048, 3
  %2050 = add nsw i32 %1366, 31
  %2051 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1485, i32 %2050, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2052 = extractvalue %dx.types.ResRet.f32 %2051, 0
  %2053 = fsub fast float %42, %2033
  %2054 = fsub fast float %43, %2034
  %2055 = fsub fast float %44, %2035
  %2056 = fmul fast float %2053, 2.097152e+06
  %2057 = fmul fast float %2054, 2.097152e+06
  %2058 = fmul fast float %2055, 2.097152e+06
  %2059 = fadd fast float %2056, %1373
  %2060 = fsub fast float %2059, %2038
  %2061 = fadd fast float %2057, %1374
  %2062 = fsub fast float %2061, %2039
  %2063 = fadd fast float %2058, %1375
  %2064 = fsub fast float %2063, %2040
  %2065 = call float @dx.op.unary.f32(i32 6, float %2060)  ; FAbs(value)
  %2066 = call float @dx.op.unary.f32(i32 6, float %2062)  ; FAbs(value)
  %2067 = call float @dx.op.unary.f32(i32 6, float %2064)  ; FAbs(value)
  %2068 = fadd fast float %2043, 1.000000e+00
  %2069 = fadd fast float %2046, 1.000000e+00
  %2070 = fadd fast float %2049, 1.000000e+00
  %2071 = fcmp fast ogt float %2065, %2068
  %2072 = fcmp fast ogt float %2066, %2069
  %2073 = fcmp fast ogt float %2067, %2070
  %2074 = or i1 %2071, %2072
  %2075 = or i1 %2074, %2073
  br i1 %2075, label %2076, label %2089

; <label>:2076                                    ; preds = %2030
  %2077 = fadd fast float %1374, %1373
  %2078 = fadd fast float %42, %43
  %2079 = fadd fast float %2077, %1375
  %2080 = fadd fast float %2078, %44
  %2081 = fmul fast float %2079, 0x3F52E83A20000000
  %2082 = fmul fast float %2080, 0x40A2E83A20000000
  %2083 = call float @dx.op.unary.f32(i32 22, float %2082)  ; Frc(value)
  %2084 = fadd fast float %2083, %2081
  %2085 = call float @dx.op.unary.f32(i32 22, float %2084)  ; Frc(value)
  %2086 = fcmp fast ogt float %2085, 5.000000e-01
  %2087 = uitofp i1 %2086 to float
  %2088 = fsub fast float 1.000000e+00, %2087
  br label %2097

; <label>:2089                                    ; preds = %2030
  %2090 = fcmp fast ogt float %2052, 0.000000e+00
  br i1 %2090, label %2091, label %2097

; <label>:2091                                    ; preds = %2089
  %2092 = fsub fast float -0.000000e+00, %2052
  %2093 = call float @dx.op.unary.f32(i32 6, float %2092)  ; FAbs(value)
  %2094 = fmul fast float %2093, 2.000000e+01
  %2095 = call float @dx.op.unary.f32(i32 7, float %2094)  ; Saturate(value)
  %2096 = fsub fast float 1.000000e+00, %2095
  br label %2097

; <label>:2097                                    ; preds = %2091, %2089, %2076, %1990
  %2098 = phi float [ %2088, %2076 ], [ %2096, %2091 ], [ %2024, %2089 ], [ %2024, %1990 ]
  %2099 = phi float [ 1.000000e+00, %2076 ], [ 0.000000e+00, %2091 ], [ %2025, %2089 ], [ %2025, %1990 ]
  %2100 = phi float [ %2087, %2076 ], [ %2096, %2091 ], [ %2026, %2089 ], [ %2026, %1990 ]
  %2101 = fadd fast float %2021, %2010
  %2102 = fadd fast float %2022, %2011
  %2103 = fadd fast float %2023, %2012
  %2104 = fadd fast float %2101, %2098
  %2105 = fadd fast float %2102, %2099
  %2106 = fadd fast float %2103, %2100
  %2107 = fmul fast float %35, 7.812500e-03
  %2108 = fmul fast float %36, 7.812500e-03
  %2109 = call float @dx.op.unary.f32(i32 22, float %2107)  ; Frc(value)
  %2110 = call float @dx.op.unary.f32(i32 22, float %2108)  ; Frc(value)
  %2111 = fmul fast float %2109, 1.280000e+02
  %2112 = fmul fast float %2110, 1.280000e+02
  %2113 = fadd fast float %2111, 0xC05015CCC0000000
  %2114 = fadd fast float %2112, 0xC0521DCCC0000000
  %2115 = fmul fast float %2113, %2113
  %2116 = fmul fast float %2114, %2114
  %2117 = fmul fast float %2114, %2113
  %2118 = call float @dx.op.dot3.f32(i32 55, float %2115, float %2116, float %2117, float 0x4034640000000000, float 0x404E5A0000000000, float 0x40036CCAA0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %2119 = call float @dx.op.unary.f32(i32 22, float %2118)  ; Frc(value)
  %2120 = fadd fast float %2119, -5.000000e-01
  %2121 = fmul fast float %1997, %1705
  %2122 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 132)  ; CBufferLoadLegacy(handle,regIndex)
  %2123 = extractvalue %dx.types.CBufRet.f32 %2122, 2
  %2124 = fmul fast float %2121, %2123
  %2125 = fadd fast float %2124, 3.906250e-03
  %2126 = call float @dx.op.unary.f32(i32 23, float %2125)  ; Log(value)
  %2127 = fmul fast float %2126, 6.250000e-02
  %2128 = fmul fast float %2120, 0x3F70101020000000
  %2129 = fadd fast float %2128, 5.000000e-01
  %2130 = fadd fast float %2129, %2127
  %2131 = fmul fast float %1550, 5.000000e-01
  %2132 = fmul fast float %1551, 5.000000e-01
  %2133 = fmul fast float %1552, 5.000000e-01
  %2134 = fadd fast float %2131, 5.000000e-01
  %2135 = fadd fast float %2132, 5.000000e-01
  %2136 = fadd fast float %2133, 5.000000e-01
  %2137 = fmul fast float %2123, %2104
  %2138 = fmul fast float %2123, %2105
  %2139 = fmul fast float %2123, %2106
  %2140 = call float @dx.op.binary.f32(i32 36, float %2137, float 3.225600e+04)  ; FMin(a,b)
  %2141 = call float @dx.op.binary.f32(i32 36, float %2138, float 3.225600e+04)  ; FMin(a,b)
  %2142 = call float @dx.op.binary.f32(i32 36, float %2139, float 3.225600e+04)  ; FMin(a,b)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %2140)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %2141)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %2142)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %2134)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %2135)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %2136)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %1639)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %1556)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %1557)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %1558)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float 0x3FE0303040000000)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %1553)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %1554)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %1555)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %2130)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float %1648)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float 1.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 2, float 1.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 3, float 1.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float, float, float, float, float, float, float) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!41}
!dx.entryPoints = !{!42}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"ps", i32 6, i32 6}
!4 = !{!5, null, !30, !36}
!5 = !{!6, !8, !10, !11, !12, !13, !14, !15, !16, !17, !18, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29}
!6 = !{i32 0, %"class.Texture3D<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 4, i32 0, !7}
!7 = !{i32 0, i32 5}
!8 = !{i32 1, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 4, i32 0, !9}
!9 = !{i32 0, i32 9}
!10 = !{i32 2, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 4, i32 0, !9}
!11 = !{i32 3, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 4, i32 0, !9}
!12 = !{i32 4, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 4, i32 0, !9}
!13 = !{i32 5, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 5, i32 1, i32 4, i32 0, !9}
!14 = !{i32 6, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 6, i32 1, i32 4, i32 0, !9}
!15 = !{i32 7, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 7, i32 1, i32 4, i32 0, !9}
!16 = !{i32 8, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 8, i32 1, i32 4, i32 0, !9}
!17 = !{i32 9, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 9, i32 1, i32 4, i32 0, !9}
!18 = !{i32 10, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 10, i32 1, i32 12, i32 0, !19}
!19 = !{i32 1, i32 16}
!20 = !{i32 11, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 11, i32 1, i32 12, i32 0, !19}
!21 = !{i32 12, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 12, i32 1, i32 12, i32 0, !19}
!22 = !{i32 13, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 13, i32 1, i32 2, i32 0, !9}
!23 = !{i32 14, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 14, i32 1, i32 2, i32 0, !9}
!24 = !{i32 15, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 15, i32 1, i32 2, i32 0, !9}
!25 = !{i32 16, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 16, i32 1, i32 11, i32 0, null}
!26 = !{i32 17, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 17, i32 1, i32 11, i32 0, null}
!27 = !{i32 18, %"class.Texture2D<unsigned long long>"* undef, !"", i32 0, i32 18, i32 1, i32 2, i32 0, !7}
!28 = !{i32 19, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 19, i32 1, i32 2, i32 0, !9}
!29 = !{i32 20, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 20, i32 1, i32 2, i32 0, !9}
!30 = !{!31, !32, !33, !34, !35}
!31 = !{i32 0, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 0, i32 1, i32 5484, null}
!32 = !{i32 1, %UniformBufferConstants_Scene* undef, !"", i32 0, i32 1, i32 1, i32 56, null}
!33 = !{i32 2, %hostlayout.UniformBufferConstants_OpaqueBasePass* undef, !"", i32 0, i32 2, i32 1, i32 2428, null}
!34 = !{i32 3, %UniformBufferConstants_Nanite* undef, !"", i32 0, i32 3, i32 1, i32 188, null}
!35 = !{i32 4, %UniformBufferConstants_Material* undef, !"", i32 0, i32 4, i32 1, i32 188, null}
!36 = !{!37, !38, !39, !40}
!37 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!38 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!39 = !{i32 2, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!40 = !{i32 3, %struct.SamplerState* undef, !"", i32 0, i32 3, i32 1, i32 0, null}
!41 = !{[10 x i32] [i32 8, i32 24, i32 0, i32 0, i32 0, i32 0, i32 1112055, i32 1112055, i32 0, i32 0]}
!42 = !{void ()* @MainPS, !"MainPS", !43, !4, !62}
!43 = !{!44, !51, null}
!44 = !{!45, !47, !48, !50}
!45 = !{i32 0, !"PACKED_VIEW_INDEX", i8 5, i8 0, !46, i8 1, i32 1, i8 1, i32 0, i8 0, null}
!46 = !{i32 0}
!47 = !{i32 1, !"MACRO_TILE_INDEX", i8 5, i8 0, !46, i8 1, i32 1, i8 1, i32 0, i8 1, null}
!48 = !{i32 2, !"SV_Position", i8 9, i8 3, !46, i8 4, i32 1, i8 4, i32 1, i8 0, !49}
!49 = !{i32 3, i32 3}
!50 = !{i32 3, !"SV_IsFrontFace", i8 5, i8 13, !46, i8 1, i32 1, i8 1, i32 0, i8 2, null}
!51 = !{!52, !54, !56, !58, !60}
!52 = !{i32 0, !"SV_Target", i8 9, i8 16, !46, i8 0, i32 1, i8 4, i32 0, i8 0, !53}
!53 = !{i32 3, i32 15}
!54 = !{i32 1, !"SV_Target", i8 9, i8 16, !55, i8 0, i32 1, i8 4, i32 1, i8 0, !53}
!55 = !{i32 1}
!56 = !{i32 2, !"SV_Target", i8 9, i8 16, !57, i8 0, i32 1, i8 4, i32 2, i8 0, !53}
!57 = !{i32 2}
!58 = !{i32 3, !"SV_Target", i8 9, i8 16, !59, i8 0, i32 1, i8 4, i32 3, i8 0, !53}
!59 = !{i32 3}
!60 = !{i32 4, !"SV_Target", i8 9, i8 16, !61, i8 0, i32 1, i8 4, i32 5, i8 0, !53}
!61 = !{i32 5}
!62 = !{i32 0, i64 16, i32 5, !46}
!63 = distinct !{!63, !"dx.controlflow.hints", i32 1}
!64 = distinct !{!64, !"dx.controlflow.hints", i32 1}
!65 = distinct !{!65, !"dx.controlflow.hints", i32 1}
!66 = distinct !{!66, !"dx.controlflow.hints", i32 1}
!67 = distinct !{!67, !"dx.controlflow.hints", i32 2}
!68 = distinct !{!68, !"dx.controlflow.hints", i32 1}
!69 = distinct !{!69, !"dx.controlflow.hints", i32 1}
!70 = distinct !{!70, !"dx.controlflow.hints", i32 1}
